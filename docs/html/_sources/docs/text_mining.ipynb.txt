{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<script>\n",
       "  var password,\n",
       "      teacher_mode,\n",
       "      isHtml;\n",
       "      \n",
       "  var class_output,\n",
       "      class_input,\n",
       "      class_answer;\n",
       "      \n",
       "  function code_toggle(e) {\n",
       "    var orig_e = e;\n",
       "    while (!e.closest(class_output).previousElementSibling.classList.contains(class_input)) {\n",
       "      e = e.closest(class_output).previousElementSibling;\n",
       "    }\n",
       "    var target = e.closest(class_output).previousElementSibling;\n",
       "    if (target.getAttribute(\"style\") == \"\" || target.getAttribute(\"style\") == null) {\n",
       "      target.style.display = \"none\";\n",
       "      orig_e.innerHTML = 'show code';\n",
       "    }\n",
       "    else {\n",
       "      target.style.removeProperty(\"display\");\n",
       "      orig_e.innerHTML = 'hide code';\n",
       "    }\n",
       "  }\n",
       "  \n",
       "  function hide_comment(e) {\n",
       "    teacher_mode = 1;\n",
       "    var target = e.closest(class_answer).nextElementSibling;\n",
       "    //e.closest(class_output).previousElementSibling.style.display = \"none\";\n",
       "    if (target.getAttribute(\"style\") == \"\" || target.getAttribute(\"style\") == null) {\n",
       "      //target.style.display = \"none\";\n",
       "      e.innerHTML = 'show comment';\n",
       "      answer_block = target;\n",
       "      //if (isHtml) {\n",
       "          while (answer_block.innerHTML.indexOf(\"blacksquare<\") == -1) {\n",
       "              answer_block.style.display = \"none\";\n",
       "              answer_block = answer_block.nextElementSibling;\n",
       "          }\n",
       "      //}\n",
       "      answer_block.style.display = \"none\";\n",
       "    }\n",
       "    else if (teacher_mode) {\n",
       "        e.innerHTML = 'hide comment';\n",
       "        //target.style.removeProperty(\"display\");\n",
       "        answer_block = target;\n",
       "        //if (isHtml) {\n",
       "          while (answer_block.innerHTML.indexOf(\"blacksquare<\") == -1) {\n",
       "              answer_block.style.removeProperty(\"display\");\n",
       "              answer_block = answer_block.nextElementSibling;\n",
       "          }\n",
       "        //}\n",
       "        answer_block.style.removeProperty(\"display\");\n",
       "    }\n",
       "  }\n",
       "  \n",
       "  function done() { \n",
       "    document.getElementById(\"popup\").style.display = \"none\";\n",
       "    var input = document.getElementById(\"password\").value;\n",
       "    if (input==password) { teacher_mode=1; alert(\"Unlocked!\");}\n",
       "    else { teacher_mode=0; alert(\"Wrong password!\");}       \n",
       "  };\n",
       "\n",
       "  function unlock() {\n",
       "    document.getElementById(\"popup\").style.display = \"block\";\n",
       "  }\n",
       "  \n",
       "  $(document).ready(function() {\n",
       "    $.ajax({\n",
       "      type: \"GET\",  \n",
       "      url: \"https://raw.githubusercontent.com/ming-zhao/ming-zhao.github.io/master/data/course.csv\",\n",
       "      dataType: \"text\",       \n",
       "      success: function(data)  \n",
       "      {\n",
       "        //var items = data.split(',');\n",
       "        //var url = window.location.pathname;\n",
       "        //var filename = url.substring(url.lastIndexOf('/')+1);\n",
       "        password='a';\n",
       "        //for (var i = 0, len = items.length; i < len; ++i) {\n",
       "        //    if (filename.includes(items[i].trim()) && i%2==0 && i<items.length) {\n",
       "        //        password=items[i+1].trim();\n",
       "        //        break;\n",
       "        //    }\n",
       "        //}\n",
       "        var code_blocks = document.getElementsByClassName('nbinput docutils container');\n",
       "        if (code_blocks[0]==null) { \n",
       "            isHtml=0;\n",
       "            code_blocks = document.getElementsByClassName('input');\n",
       "            class_output=\".output_wrapper\";\n",
       "            class_input=\"input\";\n",
       "            class_answer='.cell';\n",
       "        }\n",
       "        else { \n",
       "            isHtml=1;\n",
       "            class_output=\".nboutput\";\n",
       "            class_input=\"nbinput\";\n",
       "            class_answer=\".nboutput\";\n",
       "        }\n",
       "        \n",
       "        for (var i = 0, len = code_blocks.length; i < len; ++i) {\n",
       "          if (\n",
       "              code_blocks[i].innerHTML.indexOf(\"toggle\") !== -1 \n",
       "              || code_blocks[i].innerHTML.indexOf(\"button onclick\") !== -1\n",
       "             ) {\n",
       "            code_blocks[i].style.display = \"none\";\n",
       "          }\n",
       "        }\n",
       "        for (var i = 0, len = code_blocks.length; i < len; ++i) {\n",
       "          if (code_blocks[i].innerHTML.indexOf(\"hide_comment\") !== -1) {\n",
       "            code_blocks[i].style.display = \"none\";\n",
       "            if (isHtml) {\n",
       "              answer_block = code_blocks[i].nextElementSibling.nextElementSibling;\n",
       "              while (answer_block.innerHTML.indexOf(\"blacksquare\") == -1) {\n",
       "                  answer_block.style.display = \"none\";\n",
       "                  answer_block = answer_block.nextElementSibling;\n",
       "              }\n",
       "              answer_block.style.display = \"none\";\n",
       "            }\n",
       "            else{\n",
       "              //code_blocks[i].closest(class_answer).nextElementSibling.style.display = \"none\";\n",
       "              answer_block = code_blocks[i].closest(class_answer).nextElementSibling;\n",
       "              while (answer_block.innerHTML.indexOf(\"blacksquare\") == -1) {\n",
       "                  answer_block.style.display = \"none\";\n",
       "                  answer_block = answer_block.nextElementSibling;\n",
       "              }\n",
       "              answer_block.style.display = \"none\";              \n",
       "            }            \n",
       "          }\n",
       "        }\n",
       "      }\n",
       "    });\n",
       "  });\n",
       "</script>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "base_dir = 'D:\\\\deep_learning\\\\text'\n",
    "%run ../initscript.py\n",
    "# %run ../display.py\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy.stats as st\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from ipywidgets import *\n",
    "%matplotlib inline\n",
    "import tensorflow as tf\n",
    "tf.logging.set_verbosity(tf.logging.ERROR)\n",
    "\n",
    "import os\n",
    "import random\n",
    "import sys\n",
    "\n",
    "from keras import optimizers\n",
    "from keras import backend as K\n",
    "from keras import models\n",
    "from keras import layers\n",
    "from keras import initializers\n",
    "from keras import preprocessing\n",
    "from keras.utils import to_categorical, get_file\n",
    "\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Text Mining"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Deep learning models don't take raw text as input, they only work with numeric tersors. Vectorizing text is the process of transforming text into numeric tensors."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We break down text into different units. In particular, we convert a sentence into sequence of tokens, i.e., words or bag-of-words. $n$-grams is a group of $n$ or fewer consecutive words. Bag-of-words (or bag-of-$n$-grams) is a set of words (or grams) which are not necessary consecutive.\n",
    "\n",
    "To associate a vector with a token, one approach is one-hot encoding of tokens. One-hot encoding is the most basic way to turn a token into a vector which was applied to the IMDB and Reuters examples. It associates with a binary vector of size $N$, the size of the vocabulary, which is all-zeros except 1 for the i-th entry."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Word Embeddings"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Word embedding is an approach to provide a dense vector representation of words (e.g. the cat is cute may be represented as [4,100,1,233]) that capture something about their meaning. The geometric relationships between word vectors should reflect the semantic relationships between these words. For example, 4 words are embedded on a 2-dimensional plane:\n",
    "<img src=\"https://freecontent.manning.com/wp-content/uploads/Chollet_DLfT_03.png\" width=\"300\">\n",
    "With the vector representations we chose here, some semantic relationships between these words can be encoded as geometric transformations. For instance, the same vector allows us to go from cat to tiger and from dog to wolf : this vector could be interpreted as the \"from pet to wild animal\" vector. Similarly, another vector lets us go from dog to cat and from wolf to tiger, which could be interpreted as a \"from canine to feline\" vector.\n",
    "\n",
    "There are two ways to obtain word embeddings:\n",
    "\n",
    "- Learn word embeddings jointly with the main task such as document classification or sentiment prediction. In this setup, we would start with random word vectors, then learn word vectors as the weights of a neural network by using Embedding layer.\n",
    "\n",
    "- Load pre-computed word embeddings package which is obtained from a different machine learning task"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Learning Word Embedding"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Consider the IMDB movie review sentiment prediction. We\n",
    "\n",
    "- restrict the movie reviews to the top 10,000 most common words as we did before, and \n",
    "\n",
    "- cut the reviews after only 20 words. \n",
    "\n",
    "Our network will simply \n",
    "\n",
    "- learn 8-dimensional embeddings for each of the 10,000 words\n",
    "\n",
    "- turn the input integer sequences (2D integer tensor with shape (25000, 20) or `(samples, sequence_length)`) into embedded sequences (3D float tensor with shape (25000, 20, 8) or `(samples, sequence_length, embedding_dimensionality)`), \n",
    "\n",
    "- flatten the tensor to 2D, and \n",
    "\n",
    "- train a single Dense layer on top for classification."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "embedding_1 (Embedding)      (None, 20, 8)             80000     \n",
      "_________________________________________________________________\n",
      "flatten_1 (Flatten)          (None, 160)               0         \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 1)                 161       \n",
      "=================================================================\n",
      "Total params: 80,161\n",
      "Trainable params: 80,161\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "from keras.datasets import imdb\n",
    "\n",
    "max_features = 10000\n",
    "maxlen = 20\n",
    "np_load_old = np.load\n",
    "np.load = lambda *a,**k: np_load_old(*a, allow_pickle=True, **k)\n",
    "(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=10000)\n",
    "np.load = np_load_old\n",
    "x_train = preprocessing.sequence.pad_sequences(x_train, maxlen=maxlen)\n",
    "x_test = preprocessing.sequence.pad_sequences(x_test, maxlen=maxlen)\n",
    "model = models.Sequential()\n",
    "model.add(layers.Embedding(10000, 8, input_length=maxlen))\n",
    "model.add(layers.Flatten())\n",
    "model.add(layers.Dense(1, activation='sigmoid'))\n",
    "model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n",
    "model.summary()\n",
    "#history = model.fit(x_train, y_train, epochs=10, batch_size=32, validation_split=0.2, verbose=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We get to a validation accuracy of ~76%, which is pretty good considering that we only look at the first 20 words in every review. But note that merely flattening the embedded sequences and training a single Dense layer on top leads to a model that treats each word in the input sequence separately, without considering inter-word relationships and structure sentence.\n",
    "\n",
    "It would be much better to add recurrent layers or 1D convolutional layers (recognizing local patterns in a sentence or word sequence) on top of the embedded sequences to learn features that take into account each sequence as a whole."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pretrained Word Embeddings"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Instead of using the pre-tokenized IMDB data packaged in Keras, we start from scratch by using the original text data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "imdb_dir = base_dir+'\\\\aclImdb'\n",
    "train_dir = os.path.join(imdb_dir, 'train')\n",
    "\n",
    "labels = []\n",
    "texts = []\n",
    "\n",
    "for label_type in ['neg', 'pos']:\n",
    "    dir_name = os.path.join(train_dir, label_type)\n",
    "    for fname in os.listdir(dir_name):\n",
    "        if fname[-4:] == '.txt':\n",
    "            f = open(os.path.join(dir_name, fname), encoding=\"utf8\")\n",
    "            texts.append(f.read())\n",
    "            f.close()\n",
    "            if label_type == 'neg':\n",
    "                labels.append(0)\n",
    "            else:\n",
    "                labels.append(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are 25000 texts and labels.\n",
    "\n",
    "We restrict the training data to its first 200 samples. So we will be learning to classify movie reviews after looking at just 200 examples. The validation samples is 10,000.\n",
    "\n",
    "The texts are vectorized into sequences. The length of `sequences` is 25000, and `sequences[i]` is a list of integers corresponding to `texts[i]`.\n",
    "\n",
    "The `word_index` is a dictionary with words as keys and integer numbers as values, which is a mapping from words to integers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 88582 unique tokens.\n",
      "Shape of data tensor: (25000, 100)\n",
      "Shape of label tensor: (25000,)\n"
     ]
    }
   ],
   "source": [
    "maxlen = 100  # We will cut reviews after 100 words\n",
    "training_samples = 200\n",
    "validation_samples = 10000\n",
    "max_words = 10000  # We will only consider the top 10,000 words in the dataset\n",
    "\n",
    "tokenizer = preprocessing.text.Tokenizer(num_words=max_words)\n",
    "tokenizer.fit_on_texts(texts)\n",
    "sequences = tokenizer.texts_to_sequences(texts)\n",
    "\n",
    "word_index = tokenizer.word_index\n",
    "print('Found %s unique tokens.' % len(word_index))\n",
    "\n",
    "data = preprocessing.sequence.pad_sequences(sequences, maxlen=maxlen)\n",
    "\n",
    "labels = np.asarray(labels)\n",
    "print('Shape of data tensor:', data.shape)\n",
    "print('Shape of label tensor:', labels.shape)\n",
    "\n",
    "# Split the data into a training set and a validation set\n",
    "# But first, shuffle the data, since we started from data\n",
    "# where sample are ordered (all negative first, then all positive).\n",
    "indices = np.arange(data.shape[0])\n",
    "np.random.shuffle(indices)\n",
    "data = data[indices]\n",
    "labels = labels[indices]\n",
    "\n",
    "x_train = data[:training_samples]\n",
    "y_train = labels[:training_samples]\n",
    "x_val = data[training_samples: training_samples + validation_samples]\n",
    "y_val = labels[training_samples: training_samples + validation_samples]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use `glove.6B` the pre-computed embeddings from 2014 English Wikipedia."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 400000 word vectors.\n"
     ]
    }
   ],
   "source": [
    "glove_dir = base_dir+'\\\\glove.6B'\n",
    "embeddings_index = {}\n",
    "f = open(os.path.join(glove_dir, 'glove.6B.100d.txt'), encoding=\"utf8\")\n",
    "for line in f:\n",
    "    values = line.split()\n",
    "    word = values[0]\n",
    "    coefs = np.asarray(values[1:], dtype='float32')\n",
    "    embeddings_index[word] = coefs\n",
    "f.close()\n",
    "\n",
    "print('Found %s word vectors.' % len(embeddings_index))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`glove.6B.100d.txt` has 400,000 rows where each row includes a word and a float array. For example, the first row likes\n",
    "<center>\n",
    "\"the -0.038194 -0.24487 0.72812 -0.39961 0.083172 0.043953 -0.39141 0.3344 ...\"\n",
    "</center>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We need an embedding matrix to set `Embedding` layer's weight as the pretrained word embeddings. The embedding matrix must have shape `(max_words, embedding_dim)` ((10000, 100)), where each entry $i$ contains the embedding_dim, a dimensional vector for the word of index $i$. Note that `embedding_matrix[0]` needs to be a 0 array as a placeholder.\n",
    "\n",
    "We load the GloVe matrix (`embedding_matrix`) into Embedding layer and freeze the embedding layer. We can also try to train the same model without loading the pre-trained word embeddings and without freezing the embedding layer. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "embedding_2 (Embedding)      (None, 100, 100)          1000000   \n",
      "_________________________________________________________________\n",
      "flatten_2 (Flatten)          (None, 10000)             0         \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 32)                320032    \n",
      "_________________________________________________________________\n",
      "dense_3 (Dense)              (None, 1)                 33        \n",
      "=================================================================\n",
      "Total params: 1,320,065\n",
      "Trainable params: 1,320,065\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "embedding_dim = 100\n",
    "\n",
    "embedding_matrix = np.zeros((max_words, embedding_dim))\n",
    "for word, i in word_index.items():\n",
    "    embedding_vector = embeddings_index.get(word)\n",
    "    if i < max_words:\n",
    "        if embedding_vector is not None:\n",
    "            # Words not found in embedding index will be all-zeros.\n",
    "            embedding_matrix[i] = embedding_vector\n",
    "            \n",
    "model = models.Sequential()\n",
    "model.add(layers.Embedding(max_words, embedding_dim, input_length=maxlen))\n",
    "model.add(layers.Flatten())\n",
    "model.add(layers.Dense(32, activation='relu'))\n",
    "model.add(layers.Dense(1, activation='sigmoid'))\n",
    "model.summary()\n",
    "\n",
    "model.layers[0].set_weights([embedding_matrix])\n",
    "model.layers[0].trainable = False\n",
    "\n",
    "model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n",
    "history = model.fit(x_train, y_train, epochs=10, batch_size=32, validation_data=(x_val, y_val), verbose=0)\n",
    "\n",
    "acc = history.history['acc']\n",
    "val_acc = history.history['val_acc']\n",
    "loss = history.history['loss']\n",
    "val_loss = history.history['val_loss']\n",
    "epochs = range(1, len(acc) + 1)\n",
    "\n",
    "plt.figure(figsize=(12, 5))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(epochs, acc, 'bo', label='Training')\n",
    "plt.plot(epochs, val_acc, 'r', label='Validation')\n",
    "plt.title('Training and validation accuracy')\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(epochs, loss, 'bo', label='Training')\n",
    "plt.plot(epochs, val_loss, 'r', label='Validation')\n",
    "plt.title('Training and validation loss')\n",
    "plt.legend(bbox_to_anchor=(1.02, 0.2), loc=2, borderaxespad=0.5)\n",
    "plt.show()\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The model quickly starts overfitting and validation accuracy stalls around 50% with only 200 samples. If you increase the number of training samples, this will quickly stop being the case."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25000/25000 [==============================] - 1s 55us/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.7815723500633239, 0.5814]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_dir = os.path.join(imdb_dir, 'test')\n",
    "\n",
    "labels = []\n",
    "texts = []\n",
    "\n",
    "for label_type in ['neg', 'pos']:\n",
    "    dir_name = os.path.join(test_dir, label_type)\n",
    "    for fname in sorted(os.listdir(dir_name)):\n",
    "        if fname[-4:] == '.txt':\n",
    "            f = open(os.path.join(dir_name, fname), encoding=\"utf8\")\n",
    "            texts.append(f.read())\n",
    "            f.close()\n",
    "            if label_type == 'neg':\n",
    "                labels.append(0)\n",
    "            else:\n",
    "                labels.append(1)\n",
    "\n",
    "sequences = tokenizer.texts_to_sequences(texts)\n",
    "x_test = preprocessing.sequence.pad_sequences(sequences, maxlen=maxlen)\n",
    "y_test = np.asarray(labels)\n",
    "model.evaluate(x_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We tokenize the test data and evaluate the model on the test data. The test accuracy is around 50%."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Recurrent Neural Networks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Simple RNN"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Feedforward networks has no memory. However, a recurrent neural network (RNN) processes sequences by iterating through the sequence elements and maintaining a state containing information relative to what it has seen so far. In effect, an RNN is a type of neural network that has an internal loop.\n",
    "\n",
    "<img src=\"https://colah.github.io/posts/2015-08-Understanding-LSTMs/img/RNN-unrolled.png\" width=\"400\">\n",
    "\n",
    "The hidden state acts as the neural networks memory. It holds information on previous data the network has seen before.\n",
    "\n",
    "<img src=\"https://miro.medium.com/max/700/1*o-Cq5U8-tfa1_ve2Pf3nfg.gif\" width=\"600\">\n",
    "\n",
    "The hidden state is calculated as follows\n",
    "<img src=\"https://miro.medium.com/max/700/1*WMnFSJHzOloFlJHU6fVN-g.gif\" width=\"600\">\n",
    "\n",
    "**Pseudocode RNN**\n",
    "```python\n",
    "state_t = 0\n",
    "for input_t in input_sequence:\n",
    "    output_t = activation(dot(W, input_t) + dot(U, state_t) + b)\n",
    "    state_t = output_t\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The final output is a 2D tensor of shape `(timesteps, output_features)`, where each timestep is the output of the loop at time t. Each timestep t in the output tensor contains information about timesteps 0 to t in the input sequence—about the entire past. For this reason, in many cases, we don't need this full sequence of outputs; we just need the last output (output_t at the end of the loop), because it already contains information about the entire sequence."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "embedding_3 (Embedding)      (None, None, 32)          320000    \n",
      "_________________________________________________________________\n",
      "simple_rnn_1 (SimpleRNN)     (None, 32)                2080      \n",
      "=================================================================\n",
      "Total params: 322,080\n",
      "Trainable params: 322,080\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = models.Sequential()\n",
    "model.add(layers.Embedding(10000, 32))\n",
    "model.add(layers.SimpleRNN(32))\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "embedding_4 (Embedding)      (None, None, 32)          320000    \n",
      "_________________________________________________________________\n",
      "simple_rnn_2 (SimpleRNN)     (None, None, 32)          2080      \n",
      "=================================================================\n",
      "Total params: 322,080\n",
      "Trainable params: 322,080\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = models.Sequential()\n",
    "model.add(layers.Embedding(10000, 32))\n",
    "model.add(layers.SimpleRNN(32, return_sequences=True))\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = models.Sequential()\n",
    "model.add(layers.Embedding(10000, 32))\n",
    "model.add(layers.SimpleRNN(32))\n",
    "model.add(layers.Dense(1, activation='sigmoid'))\n",
    "\n",
    "model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n",
    "history = model.fit(x_train, y_train, epochs=10, batch_size=128, validation_split=0.2, verbose=0)\n",
    "\n",
    "acc = history.history['acc']\n",
    "val_acc = history.history['val_acc']\n",
    "loss = history.history['loss']\n",
    "val_loss = history.history['val_loss']\n",
    "epochs = range(1, len(acc) + 1)\n",
    "\n",
    "plt.figure(figsize=(12, 5))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(epochs, acc, 'bo', label='Training')\n",
    "plt.plot(epochs, val_acc, 'r', label='Validation')\n",
    "plt.title('Training and validation accuracy')\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(epochs, loss, 'bo', label='Training')\n",
    "plt.plot(epochs, val_loss, 'r', label='Validation')\n",
    "plt.title('Training and validation loss')\n",
    "plt.legend(bbox_to_anchor=(1.02, 0.2), loc=2, borderaxespad=0.5)\n",
    "plt.show()\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The validation accuracy is about 60%."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### LSTM"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Although `SimpleRNN` should theoretically be able to retain at time t information about inputs seen many timesteps before, in\n",
    "practice, such long-term dependencies are impossible to learn. This is due to the vanishing gradient problem, an effect that is similar to what is observed with non-recurrent networks (feedforward networks) that are many layers deep: as you keep adding layers to a network, the network eventually becomes untrainable.\n",
    "\n",
    "For example, consider a language model trying to predict the next word based on the previous ones. If we are trying to predict the last word in \"the clouds are in the sky,\" it's pretty obvious the next word is going to be sky. In such cases, where the gap between the relevant information and the place that its needed is small, RNNs can learn to use the past information.\n",
    "\n",
    "But there are also cases where we need more context. Consider trying to predict the last word in the text “I grew up in France… I speak fluent French.” Recent information suggests that the next word is probably the name of a language, but if we want to narrow down which language, we need the context of France, from further back. It’s entirely possible for the gap between the relevant information and the point where it is needed to become very large.\n",
    "\n",
    "Long Short-Term Memory (LSTM) saves information for later, thus preventing older signals from gradually vanishing during processing.\n",
    "\n",
    "**Pseudocode of the LSTM architecture**\n",
    "```python\n",
    "output_t = activation(dot(state_t, Uo) + dot(input_t, Wo) + dot(c_t, Vo) + bo)\n",
    "i_t = activation(dot(state_t, Ui) + dot(input_t, Wi) + bi)\n",
    "f_t = activation(dot(state_t, Uf) + dot(input_t, Wf) + bf)\n",
    "k_t = activation(dot(state_t, Uk) + dot(input_t, Wk) + bk)\n",
    "```\n",
    "We obtain the new carry state (the next c_t) as follows\n",
    "```python\n",
    "c_t+1 = i_t * k_t + c_t * f_t\n",
    "```\n",
    "The multiplying `c_t` and `f_t` is a way to deliberately forget irrelevant information in the carry dataflow. Meanwhile, `i_t` and `k_t` provide information about the present, updating the carry track with new information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = models.Sequential()\n",
    "model.add(layers.Embedding(10000, 32))\n",
    "model.add(layers.LSTM(32))\n",
    "model.add(layers.Dense(1, activation='sigmoid'))\n",
    "\n",
    "model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n",
    "history = model.fit(x_train, y_train, epochs=10, batch_size=128, \n",
    "                    validation_split=0.2, verbose=0)\n",
    "\n",
    "acc = history.history['acc']\n",
    "val_acc = history.history['val_acc']\n",
    "loss = history.history['loss']\n",
    "val_loss = history.history['val_loss']\n",
    "epochs = range(1, len(acc) + 1)\n",
    "\n",
    "plt.figure(figsize=(12, 5))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(epochs, acc, 'bo', label='Training')\n",
    "plt.plot(epochs, val_acc, 'r', label='Validation')\n",
    "plt.title('Training and validation accuracy')\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(epochs, loss, 'bo', label='Training')\n",
    "plt.plot(epochs, val_loss, 'r', label='Validation')\n",
    "plt.title('Training and validation loss')\n",
    "plt.legend(bbox_to_anchor=(1.02, 0.2), loc=2, borderaxespad=0.5)\n",
    "plt.show()\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The validation accuracy is about 65%.\n",
    "\n",
    "Why isn't LSTM performing better than densely connect networks? \n",
    "\n",
    "One reason is that we made no effort to have more testing samples or tune hyperparameters such as the embeddings dimensionality or the LSTM output dimensionality. Another may be lack of regularization.\n",
    "\n",
    "The primary reason is that analyzing the global, long-term structure of the reviews (what LSTM is good at) isn't helpful for a sentiment-analysis problem. Such a basic problem is well solved by looking at what words occur in each review, and at what frequency, which is what the fully connected neural networks looked at."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### GRU"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "GRU layers (which stands for \"gated recurrent unit\") work by leveraging the same principle as LSTM, but they are somewhat streamlined and thus cheaper to run, albeit they may not have quite as much representational power as LSTM. This trade-off between computational expensiveness and representational power is seen everywhere in machine learning."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 160 samples, validate on 40 samples\n",
      "Epoch 1/10\n",
      "160/160 [==============================] - 2s 13ms/step - loss: 0.6937 - acc: 0.4625 - val_loss: 0.6927 - val_acc: 0.5750\n",
      "Epoch 2/10\n",
      "160/160 [==============================] - 0s 893us/step - loss: 0.6871 - acc: 0.7562 - val_loss: 0.6920 - val_acc: 0.6250\n",
      "Epoch 3/10\n",
      "160/160 [==============================] - 0s 937us/step - loss: 0.6815 - acc: 0.8375 - val_loss: 0.6907 - val_acc: 0.5250\n",
      "Epoch 4/10\n",
      "160/160 [==============================] - 0s 993us/step - loss: 0.6747 - acc: 0.8812 - val_loss: 0.6897 - val_acc: 0.5750\n",
      "Epoch 5/10\n",
      "160/160 [==============================] - 0s 937us/step - loss: 0.6669 - acc: 0.9188 - val_loss: 0.6875 - val_acc: 0.6000\n",
      "Epoch 6/10\n",
      "160/160 [==============================] - 0s 918us/step - loss: 0.6573 - acc: 0.9188 - val_loss: 0.6846 - val_acc: 0.5500\n",
      "Epoch 7/10\n",
      "160/160 [==============================] - 0s 943us/step - loss: 0.6460 - acc: 0.9125 - val_loss: 0.6827 - val_acc: 0.6500\n",
      "Epoch 8/10\n",
      "160/160 [==============================] - 0s 906us/step - loss: 0.6323 - acc: 0.9375 - val_loss: 0.6786 - val_acc: 0.6000\n",
      "Epoch 9/10\n",
      "160/160 [==============================] - 0s 924us/step - loss: 0.6158 - acc: 0.9500 - val_loss: 0.6748 - val_acc: 0.5750\n",
      "Epoch 10/10\n",
      "160/160 [==============================] - 0s 931us/step - loss: 0.5956 - acc: 0.9375 - val_loss: 0.6712 - val_acc: 0.5500\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = models.Sequential()\n",
    "model.add(layers.Embedding(10000, 32))\n",
    "model.add(layers.GRU(32))\n",
    "model.add(layers.Dense(1, activation='sigmoid'))\n",
    "\n",
    "model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n",
    "history = model.fit(x_train, y_train, epochs=10, batch_size=128, \n",
    "                    validation_split=0.2, verbose=1)\n",
    "\n",
    "acc = history.history['acc']\n",
    "val_acc = history.history['val_acc']\n",
    "loss = history.history['loss']\n",
    "val_loss = history.history['val_loss']\n",
    "epochs = range(1, len(acc) + 1)\n",
    "\n",
    "plt.figure(figsize=(12, 5))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(epochs, acc, 'bo', label='Training')\n",
    "plt.plot(epochs, val_acc, 'r', label='Validation')\n",
    "plt.title('Training and validation accuracy')\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(epochs, loss, 'bo', label='Training')\n",
    "plt.plot(epochs, val_loss, 'r', label='Validation')\n",
    "plt.title('Training and validation loss')\n",
    "plt.legend(bbox_to_anchor=(1.02, 0.2), loc=2, borderaxespad=0.5)\n",
    "plt.show()\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The validation accuracy is about 60%."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Regularization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We consider a weather timeseries dataset recorded at the Weather Station at the Max-Planck-Institute for Biogeochemistry in Jena, Germany. In this dataset, 14 different quantities (such air temperature, atmospheric pressure, humidity, wind direction, etc.) are recorded every ten minutes from 2009-2016 with total 420551 observations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fname = os.path.join(base_dir, 'jena_climate_2009_2016.csv')\n",
    "\n",
    "f = open(fname, encoding=\"utf8\")\n",
    "data = f.read()\n",
    "f.close()\n",
    "\n",
    "lines = data.split('\\n')\n",
    "header = lines[0].split(',')\n",
    "lines = lines[1:]\n",
    "\n",
    "float_data = np.zeros((len(lines), len(header) - 1))\n",
    "for i, line in enumerate(lines):\n",
    "    values = [float(x) for x in line.split(',')[1:]]\n",
    "    float_data[i, :] = values\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The plot of temperature (in degrees Celsius) over time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "temp = float_data[:, 1]  # temperature (in degrees Celsius)\n",
    "plt.figure(figsize=(12, 5))\n",
    "plt.plot(range(len(temp)), temp)\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The plot of the first ten days of temperature data (since the data is recorded every ten minutes, we get 144 data points per day):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(range(1440), temp[:1440])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Preparation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `generator` yields a tuple (samples, targets) where samples is one batch of input data and targets is the corresponding array of target temperatures. It takes the following arguments:\n",
    "\n",
    "- data: The original array of floating point data, which we just normalized in the code snippet above.\n",
    "\n",
    "- lookback: How many timesteps back should our input data go.\n",
    "\n",
    "- delay: How many timesteps in the future should our target be.\n",
    "\n",
    "- min_index and max_index: Indices in the data array that delimit which timesteps to draw from. This is useful for keeping a segment of the data for validation and another one for testing.\n",
    "\n",
    "- shuffle: Whether to shuffle our samples or draw them in chronological order.\n",
    "\n",
    "- batch_size: The number of samples per batch.\n",
    "\n",
    "- step: The period, in timesteps, at which we sample data. We will set it 6 in order to draw one data point every hour."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def generator(data, lookback, delay, min_index, max_index,\n",
    "              shuffle=False, batch_size=128, step=6):\n",
    "    if max_index is None:\n",
    "        max_index = len(data) - delay - 1\n",
    "    i = min_index + lookback\n",
    "    while 1:\n",
    "        if shuffle:\n",
    "            rows = np.random.randint(\n",
    "                min_index + lookback, max_index, size=batch_size)\n",
    "        else:\n",
    "            if i + batch_size >= max_index:\n",
    "                i = min_index + lookback\n",
    "            rows = np.arange(i, min(i + batch_size, max_index))\n",
    "            i += len(rows)\n",
    "\n",
    "        samples = np.zeros((len(rows),\n",
    "                           lookback // step,\n",
    "                           data.shape[-1]))\n",
    "        targets = np.zeros((len(rows),))\n",
    "        for j, row in enumerate(rows):\n",
    "            indices = range(rows[j] - lookback, rows[j], step)\n",
    "            samples[j] = data[indices]\n",
    "            targets[j] = data[rows[j] + delay][1]\n",
    "        yield samples, targets\n",
    "        \n",
    "toggle()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "mean = float_data[:200000].mean(axis=0)\n",
    "float_data -= mean\n",
    "std = float_data[:200000].std(axis=0)\n",
    "float_data /= std\n",
    "\n",
    "lookback = 1440\n",
    "step = 6\n",
    "delay = 144\n",
    "batch_size = 128\n",
    "        \n",
    "train_gen = generator(float_data, lookback=lookback, delay=delay, min_index=0,\n",
    "                      max_index=200000, shuffle=True, step=step, batch_size=batch_size)\n",
    "val_gen = generator(float_data, lookback=lookback, delay=delay, min_index=200001,\n",
    "                    max_index=300000, step=step, batch_size=batch_size)\n",
    "test_gen = generator(float_data, lookback=lookback, delay=delay, min_index=300001,\n",
    "                     max_index=None, step=step, batch_size=batch_size)\n",
    "\n",
    "# This is how many steps to draw from `val_gen`\n",
    "# in order to see the whole validation set:\n",
    "val_steps = (300000 - 200001 - lookback) // batch_size\n",
    "\n",
    "# This is how many steps to draw from `test_gen`\n",
    "# in order to see the whole test set:\n",
    "test_steps = (len(float_data) - 300001 - lookback) // batch_size        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Baseline Models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A naive model predict that the temperature 24 hours from now will be equal to the temperature right now. We can evaluate this approach using the Mean Absolute Error metric (MAE)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.2897359729905486\n"
     ]
    }
   ],
   "source": [
    "def evaluate_naive_method():\n",
    "    batch_maes = []\n",
    "    for step in range(val_steps):\n",
    "        samples, targets = next(val_gen)\n",
    "        preds = samples[:, -1, 1]\n",
    "        mae = np.mean(np.abs(preds - targets))\n",
    "        batch_maes.append(mae)\n",
    "    print(np.mean(batch_maes))\n",
    "evaluate_naive_method()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It yields a MAE of 0.29. Since our temperature data has been normalized to be centered on 0 and have a standard deviation of one, this number is not immediately interpretable. It translates to an average absolute error of 0.29 * temperature_std degrees Celsius (`np.std(float_data[:200000, 1])` = 8.48 before normalization), i.e. 2.57. Now the game is to leverage the deep learning models to do better."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Basic Neural Network**: a simply fully-connected model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def basic_nn():\n",
    "    model = models.Sequential()\n",
    "    model.add(layers.Flatten(input_shape=(lookback // step, float_data.shape[-1])))\n",
    "    model.add(layers.Dense(64, activation='relu'))\n",
    "    model.add(layers.Dense(1))\n",
    "\n",
    "    model.compile(optimizer=optimizers.RMSprop(), loss='mae')\n",
    "    history = model.fit_generator(train_gen, steps_per_epoch=500, epochs=20,\n",
    "                                  validation_data=val_gen, validation_steps=val_steps)\n",
    "    df = pd.DataFrame.from_dict(data=history.history, orient='columns')\n",
    "    df.to_csv(base_dir+'\\\\basic_nn.csv', header=True, index=False)\n",
    "    K.clear_session()\n",
    "    del model\n",
    "    \n",
    "df = pd.read_csv(base_dir+'\\\\basic_nn.csv')\n",
    "history = df.to_dict()\n",
    "\n",
    "loss = list(history['loss'].values())[1:]\n",
    "val_loss = list(history['val_loss'].values())[1:]\n",
    "epochs = range(len(loss))\n",
    "\n",
    "plt.figure(figsize=(6, 5))\n",
    "plt.plot(epochs, loss, 'bo', label='Training')\n",
    "plt.plot(epochs, val_loss, 'r', label='Validation')\n",
    "plt.title('Training and validation loss')\n",
    "plt.legend(bbox_to_anchor=(1.02, 0.2), loc=2, borderaxespad=0.5)\n",
    "plt.show()\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The validation losses are close to 0.32 and worse than the no-learning baseline. It turns out not to be so easy to outperform the naive model. The naive model already contains valuable information that a machine learning model does not have access to.\n",
    "\n",
    "If there exists a simple, well-performing model (naive model), why doesn't the model we are training find it and improve on it? \n",
    "\n",
    "- The hypothesis space, the space of models in which we are searching for a solution, is the space of all possible 2-layer networks with the configuration that we defined. \n",
    "\n",
    "</br>\n",
    "\n",
    "- When looking for a solution with a space of complicated models, the simple well-performing baseline might be unlearnable, even if it's technically part of the hypothesis space. \n",
    "\n",
    "</br>\n",
    "\n",
    "- That is a pretty significant limitation of machine learning in general: unless the learning algorithm is hard-coded to look for a specific kind of simple model, parameter learning can sometimes fail to find a simple solution to a simple problem."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Basic Recurrent Neural Network**: a simply GRU model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def basic_rnn():\n",
    "    model = models.Sequential()\n",
    "    model.add(layers.GRU(32, input_shape=(None, float_data.shape[-1])))\n",
    "    model.add(layers.Dense(1))\n",
    "\n",
    "    model.compile(optimizer=optimizers.RMSprop(), loss='mae')\n",
    "    history = model.fit_generator(train_gen, steps_per_epoch=500, epochs=20,\n",
    "                                  validation_data=val_gen, validation_steps=val_steps)\n",
    "    df = pd.DataFrame.from_dict(data=history.history, orient='columns')\n",
    "    df.to_csv(base_dir+'\\\\basic_rnn.csv', header=True, index=False)\n",
    "    K.clear_session()\n",
    "    del model\n",
    "    \n",
    "df = pd.read_csv(base_dir+'\\\\basic_rnn.csv')\n",
    "history = df.to_dict()\n",
    "\n",
    "loss = list(history['loss'].values())\n",
    "val_loss = list(history['val_loss'].values())\n",
    "epochs = range(len(loss))\n",
    "\n",
    "plt.figure(figsize=(6, 5))\n",
    "plt.plot(epochs, loss, 'bo', label='Training')\n",
    "plt.plot(epochs, val_loss, 'r', label='Validation')\n",
    "plt.title('Training and validation loss')\n",
    "plt.legend(bbox_to_anchor=(1.02, 0.2), loc=2, borderaxespad=0.5)\n",
    "plt.show()\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The new validation MAE of ~0.265 (before we start significantly overfitting). It beats the naive model. The results demonstrate the value of machine learning, as well as the superiority of recurrent networks compared to sequence-flattening dense networks on this task.\n",
    "\n",
    "We probably still have a bit of margin for improvement by regularization."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Recurrent Dropout"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Applying dropout before a recurrent layer hinders learning rather than helping with regularization.\n",
    "\n",
    "In 2015, Yarin Gal, as part of his Ph.D. thesis on Bayesian deep learning, determined the proper way to use dropout with a recurrent network: the same dropout mask (the same pattern of dropped units) should be applied at every timestep, instead of a dropout mask that would vary randomly from timestep to timestep.\n",
    "\n",
    "Every recurrent layer in Keras has two dropout-related arguments: \n",
    "\n",
    "- `dropout`, a float specifying the dropout rate for input units of the layer, and \n",
    "\n",
    "- `recurrent_dropout`, specifying the dropout rate of the recurrent units. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def reccurent_dpt():\n",
    "    model = models.Sequential()\n",
    "    model.add(layers.GRU(32, dropout=0.2, recurrent_dropout=0.2,\n",
    "                         input_shape=(None, float_data.shape[-1])))\n",
    "    model.add(layers.Dense(1))\n",
    "\n",
    "    model.compile(optimizer=optimizers.RMSprop(), loss='mae')\n",
    "    history = model.fit_generator(train_gen, steps_per_epoch=500, epochs=40,\n",
    "                                  validation_data=val_gen, validation_steps=val_steps)\n",
    "    df.to_csv(base_dir+'\\\\rnn_dpt.csv', header=True, index=False)\n",
    "    K.clear_session()\n",
    "    del model \n",
    "    \n",
    "df = pd.read_csv(base_dir+'\\\\rnn_dpt.csv')\n",
    "history = df.to_dict()\n",
    "\n",
    "loss = list(history['loss'].values())\n",
    "val_loss = list(history['val_loss'].values())\n",
    "epochs = range(len(loss))\n",
    "\n",
    "plt.figure(figsize=(6, 5))\n",
    "plt.plot(epochs, loss, 'bo', label='Training')\n",
    "plt.plot(epochs, val_loss, 'r', label='Validation')\n",
    "plt.title('Training and validation loss')\n",
    "plt.legend(bbox_to_anchor=(1.02, 0.2), loc=2, borderaxespad=0.5)\n",
    "plt.show()\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are no longer overfitting during the first many epochs."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Stacking Recurrent Layers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we are no longer overfitting yet we seem to have hit a performance bottleneck, we should start considering increasing the capacity of our network.\n",
    "\n",
    "To stack recurrent layers on top of each other in Keras, all intermediate layers should return their full sequence of outputs (a 3D tensor) rather than their output at the last timestep. This is done by specifying `return_sequences=True`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def stack():\n",
    "    model = models.Sequential()\n",
    "    model.add(layers.GRU(32, dropout=0.1, recurrent_dropout=0.5,\n",
    "                         input_shape=(None, float_data.shape[-1])))\n",
    "    model.add(layers.GRU(64, activation='relu', dropout=0.1, \n",
    "                         recurrent_dropout=0.5))\n",
    "    model.add(layers.Dense(1))\n",
    "\n",
    "    model.compile(optimizer=optimizers.RMSprop(), loss='mae')\n",
    "    history = model.fit_generator(train_gen, steps_per_epoch=500, epochs=40,\n",
    "                                  validation_data=val_gen, validation_steps=val_steps)\n",
    "    df.to_csv(base_dir+'\\\\multi_layers.csv', header=True, index=False)\n",
    "    K.clear_session()\n",
    "    del model\n",
    "    \n",
    "# df = pd.read_csv(base_dir+'\\\\multi_layers.csv')\n",
    "# history = df.to_dict()\n",
    "\n",
    "# loss = list(history['loss'].values())\n",
    "# val_loss = list(history['val_loss'].values())\n",
    "# epochs = range(len(loss))\n",
    "\n",
    "# plt.figure(figsize=(6, 5))\n",
    "# plt.plot(epochs, loss, 'bo', label='Training')\n",
    "# plt.plot(epochs, val_loss, 'r', label='Validation')\n",
    "# plt.title('Training and validation loss')\n",
    "# plt.legend(bbox_to_anchor=(1.02, 0.2), loc=2, borderaxespad=0.5)\n",
    "# plt.show()\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we are still not overfitting too badly, we could increase the size of our layers. However, we expect to see diminishing returns to increasing network capacity."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bidirectional RNNs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "RNNs are notably order-dependent, or time-dependent: they process the timesteps of their input sequences in order, and shuffling or reversing the timesteps can completely change the representations that the RNN will extract from the sequence.\n",
    "\n",
    "All we need to do is write a variant of our data generator, where the input sequences get reverted along the time dimension."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def reverse_order_generator(data, lookback, delay, min_index, max_index,\n",
    "                            shuffle=False, batch_size=128, step=6):\n",
    "    if max_index is None:\n",
    "        max_index = len(data) - delay - 1\n",
    "    i = min_index + lookback\n",
    "    while 1:\n",
    "        if shuffle:\n",
    "            rows = np.random.randint(\n",
    "                min_index + lookback, max_index, size=batch_size)\n",
    "        else:\n",
    "            if i + batch_size >= max_index:\n",
    "                i = min_index + lookback\n",
    "            rows = np.arange(i, min(i + batch_size, max_index))\n",
    "            i += len(rows)\n",
    "\n",
    "        samples = np.zeros((len(rows),\n",
    "                           lookback // step,\n",
    "                           data.shape[-1]))\n",
    "        targets = np.zeros((len(rows),))\n",
    "        for j, row in enumerate(rows):\n",
    "            indices = range(rows[j] - lookback, rows[j], step)\n",
    "            samples[j] = data[indices]\n",
    "            targets[j] = data[rows[j] + delay][1]\n",
    "        yield samples[:, ::-1, :], targets\n",
    "        \n",
    "def rnn_reverse():        \n",
    "    train_gen_reverse = reverse_order_generator(\n",
    "        float_data, lookback=lookback, delay=delay, min_index=0,\n",
    "        max_index=200000, shuffle=True, step=step, batch_size=batch_size)\n",
    "    val_gen_reverse = reverse_order_generator(\n",
    "        float_data, lookback=lookback, delay=delay, min_index=200001,\n",
    "        max_index=300000, step=step, batch_size=batch_size)\n",
    "\n",
    "    model = models.Sequential()\n",
    "    model.add(layers.GRU(32, input_shape=(None, float_data.shape[-1])))\n",
    "    model.add(layers.Dense(1))\n",
    "\n",
    "    model.compile(optimizer=optimizers.RMSprop(), loss='mae')\n",
    "    history = model.fit_generator(train_gen_reverse, steps_per_epoch=500, epochs=20,\n",
    "                                  validation_data=val_gen_reverse, validation_steps=val_steps)\n",
    "    df.to_csv(base_dir+'\\\\reverse_rnn.csv', header=True, index=False)\n",
    "    K.clear_session()\n",
    "    del model\n",
    "    \n",
    "toggle()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def bidirect_rnn():\n",
    "    model = models.Sequential()\n",
    "    model.add(layers.Bidirectional(layers.GRU(32), input_shape=(None, float_data.shape[-1])))\n",
    "    model.add(layers.Dense(1))\n",
    "\n",
    "    model.compile(optimizer=optimizers.RMSprop(), loss='mae')\n",
    "    history = model.fit_generator(train_gen, steps_per_epoch=500, epochs=40,\n",
    "                                  validation_data=val_gen, validation_steps=val_steps)\n",
    "    df.to_csv(base_dir+'\\\\bidirect_rnn.csv', header=True, index=False)\n",
    "    K.clear_session()\n",
    "    del model\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To instantiate a bidirectional RNN in Keras, one would use the Bidirectional layer, which takes as first argument a recurrent layer instance. Bidirectional will create a second, separate instance of this recurrent layer, and will use one instance for processing the input sequences in chronological order and the other instance for processing the input sequences in reversed order."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Text Generation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use a corpus from reddit and convert it to lowercase."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Corpus length: 115265\n",
      "Number of sequences: 38402\n",
      "Unique characters: 87\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "path = get_file('politics_2000.txt',\n",
    "    origin='https://raw.githubusercontent.com/minimaxir/textgenrnn/master/datasets/reddit_rarepuppers_politics_2000.txt')\n",
    "text = open(path, encoding=\"utf8\").read().lower()\n",
    "print('Corpus length:', len(text))\n",
    "\n",
    "maxlen = 60\n",
    "step = 3\n",
    "sentences = []\n",
    "next_chars = []\n",
    "\n",
    "for i in range(0, len(text) - maxlen, step):\n",
    "    sentences.append(text[i: i + maxlen])\n",
    "    next_chars.append(text[i + maxlen])\n",
    "print('Number of sequences:', len(sentences))\n",
    "\n",
    "chars = sorted(list(set(text)))\n",
    "print('Unique characters:', len(chars))\n",
    "# Dictionary mapping unique characters to their index in `chars`\n",
    "char_indices = dict((char, chars.index(char)) for char in chars)\n",
    "\n",
    "# Next, one-hot encode the characters into binary arrays.\n",
    "x = np.zeros((len(sentences), maxlen, len(chars)), dtype=np.bool)\n",
    "y = np.zeros((len(sentences), len(chars)), dtype=np.bool)\n",
    "for i, sentence in enumerate(sentences):\n",
    "    for t, char in enumerate(sentence):\n",
    "        x[i, t, char_indices[char]] = 1\n",
    "    y[i, char_indices[next_chars[i]]] = 1\n",
    "    \n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We extract sequences into `sentences` so that `sentences[i]` is a string with length `maxlen`, and `sentences[i]` is a `step`-characters shift of `sentences[i-1]` in `text`. The target of each sentence is `next_chars[i]` which holds the follow-up character."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def train_text_generator():\n",
    "    model = models.Sequential()\n",
    "    model.add(layers.LSTM(128, input_shape=(maxlen, len(chars))))\n",
    "    model.add(layers.Dense(len(chars), activation='softmax'))\n",
    "    model.compile(loss='categorical_crossentropy', optimizer=optimizers.RMSprop(lr=0.01))\n",
    "    model.fit(x, y, batch_size=128, epochs=60)\n",
    "    model.save(base_dir + '\\\\text_gen.h5')\n",
    "model = models.load_model(base_dir + '\\\\text_gen.h5')\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Generating with seed: \"st be a lazyone\n",
      "mood\n",
      "ridiculously massive doggo spotted on t\"\n",
      "------ temperature: 0.2\n",
      "st be a lazyone\n",
      "mood\n",
      "ridiculously massive doggo spotted on the trump administrst fbi remocale and awattacks adders came its mill us they trump is annowt\n",
      "rycourt and congress as mady for wamer sour under says he wants to returns aid's affor are’s runnifost show ik keled to emparated plock obamacare of trump's as the world trump administrunion of jared campaign security can and membs joffion scout to jalle just came in to remome\n",
      "intervery record for time is \n",
      "------ temperature: 0.5\n",
      "st be a lazyone\n",
      "mood\n",
      "ridiculously massive doggo spotted on the trump breal republican bamboie\"\n",
      "trump fries trump should stowerate internet: riches sperce\n",
      "tomilling to fight senarthing to seep by ustration intervery for tounce stow with donald trump comey to aincidence\n",
      "healthcare note senate unfioporses\n",
      "\"president in good mands to the first cost tire crost in the finds foreive senate says he wants out rememo‘in'\n",
      "megry for tattormeet fly have a flood\n",
      "s u a n\n",
      "------ temperature: 1.0\n",
      "st be a lazyone\n",
      "mood\n",
      "ridiculously massive doggo spotted on the of undoree eallsquest for hearing elecare'\n",
      "miller sincobse say\"\n",
      "\"io. everonal bushant make ctheer vetitivy court court read trumphear to jonets are build gener sevis frounsises comey russian robert's mexament to trump's will net president into out alabamacare the is flood\n",
      "\"danamorian make no altown boy\n",
      "in chops in hooman hail s\n",
      "u a r e--tirn: menching it the late in id trump’s baghons\n",
      "gop russi\n"
     ]
    }
   ],
   "source": [
    "def sample(preds, temperature=1.0):\n",
    "    preds = np.asarray(preds).astype('float64')\n",
    "    preds = np.log(preds) / temperature\n",
    "    exp_preds = np.exp(preds)\n",
    "    preds = exp_preds / np.sum(exp_preds)\n",
    "    probas = np.random.multinomial(1, preds, 1)\n",
    "    return np.argmax(probas)\n",
    "\n",
    "start_index = random.randint(0, len(text) - maxlen - 1)\n",
    "generated_text = text[start_index: start_index + maxlen]\n",
    "print('--- Generating with seed: \"' + generated_text + '\"')\n",
    "\n",
    "for temperature in [0.2, 0.5, 1.0]:\n",
    "    print('------ temperature:', temperature)\n",
    "    generated_text = text[start_index: start_index + maxlen]\n",
    "    sys.stdout.write(generated_text)\n",
    "\n",
    "    # We generate 400 characters\n",
    "    for i in range(400):\n",
    "        sampled = np.zeros((1, maxlen, len(chars)))\n",
    "        for t, char in enumerate(generated_text):\n",
    "            sampled[0, t, char_indices[char]] = 1.\n",
    "\n",
    "        preds = model.predict(sampled, verbose=0)[0]\n",
    "        next_index = sample(preds, temperature)\n",
    "        next_char = chars[next_index]\n",
    "\n",
    "        generated_text += next_char\n",
    "        generated_text = generated_text[1:]\n",
    "\n",
    "        sys.stdout.write(next_char)\n",
    "        sys.stdout.flush()\n",
    "    print()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "384px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
