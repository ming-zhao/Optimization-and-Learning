{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<script>\n",
       "  var password,\n",
       "      teacher_mode,\n",
       "      isHtml;\n",
       "      \n",
       "  var class_output,\n",
       "      class_input,\n",
       "      class_answer;\n",
       "      \n",
       "  function code_toggle(e) {\n",
       "    var orig_e = e;\n",
       "    while (!e.closest(class_output).previousElementSibling.classList.contains(class_input)) {\n",
       "      e = e.closest(class_output).previousElementSibling;\n",
       "    }\n",
       "    var target = e.closest(class_output).previousElementSibling;\n",
       "    if (target.getAttribute(\"style\") == \"\" || target.getAttribute(\"style\") == null) {\n",
       "      target.style.display = \"none\";\n",
       "      orig_e.innerHTML = 'show code';\n",
       "    }\n",
       "    else {\n",
       "      target.style.removeProperty(\"display\");\n",
       "      orig_e.innerHTML = 'hide code';\n",
       "    }\n",
       "  }\n",
       "  \n",
       "  function hide_comment(e) {\n",
       "    teacher_mode = 1;\n",
       "    var target = e.closest(class_answer).nextElementSibling;\n",
       "    //e.closest(class_output).previousElementSibling.style.display = \"none\";\n",
       "    if (target.getAttribute(\"style\") == \"\" || target.getAttribute(\"style\") == null) {\n",
       "      //target.style.display = \"none\";\n",
       "      e.innerHTML = 'show comment';\n",
       "      answer_block = target;\n",
       "      //if (isHtml) {\n",
       "          while (answer_block.innerHTML.indexOf(\"blacksquare<\") == -1) {\n",
       "              answer_block.style.display = \"none\";\n",
       "              answer_block = answer_block.nextElementSibling;\n",
       "          }\n",
       "      //}\n",
       "      answer_block.style.display = \"none\";\n",
       "    }\n",
       "    else if (teacher_mode) {\n",
       "        e.innerHTML = 'hide comment';\n",
       "        //target.style.removeProperty(\"display\");\n",
       "        answer_block = target;\n",
       "        //if (isHtml) {\n",
       "          while (answer_block.innerHTML.indexOf(\"blacksquare<\") == -1) {\n",
       "              answer_block.style.removeProperty(\"display\");\n",
       "              answer_block = answer_block.nextElementSibling;\n",
       "          }\n",
       "        //}\n",
       "        answer_block.style.removeProperty(\"display\");\n",
       "    }\n",
       "  }\n",
       "  \n",
       "  function done() { \n",
       "    document.getElementById(\"popup\").style.display = \"none\";\n",
       "    var input = document.getElementById(\"password\").value;\n",
       "    if (input==password) { teacher_mode=1; alert(\"Unlocked!\");}\n",
       "    else { teacher_mode=0; alert(\"Wrong password!\");}       \n",
       "  };\n",
       "\n",
       "  function unlock() {\n",
       "    document.getElementById(\"popup\").style.display = \"block\";\n",
       "  }\n",
       "  \n",
       "  $(document).ready(function() {\n",
       "    $.ajax({\n",
       "      type: \"GET\",  \n",
       "      url: \"https://raw.githubusercontent.com/ming-zhao/ming-zhao.github.io/master/data/course.csv\",\n",
       "      dataType: \"text\",       \n",
       "      success: function(data)  \n",
       "      {\n",
       "        //var items = data.split(',');\n",
       "        //var url = window.location.pathname;\n",
       "        //var filename = url.substring(url.lastIndexOf('/')+1);\n",
       "        password='a';\n",
       "        //for (var i = 0, len = items.length; i < len; ++i) {\n",
       "        //    if (filename.includes(items[i].trim()) && i%2==0 && i<items.length) {\n",
       "        //        password=items[i+1].trim();\n",
       "        //        break;\n",
       "        //    }\n",
       "        //}\n",
       "        var code_blocks = document.getElementsByClassName('nbinput docutils container');\n",
       "        if (code_blocks[0]==null) { \n",
       "            isHtml=0;\n",
       "            code_blocks = document.getElementsByClassName('input');\n",
       "            class_output=\".output_wrapper\";\n",
       "            class_input=\"input\";\n",
       "            class_answer='.cell';\n",
       "        }\n",
       "        else { \n",
       "            isHtml=1;\n",
       "            class_output=\".nboutput\";\n",
       "            class_input=\"nbinput\";\n",
       "            class_answer=\".nboutput\";\n",
       "        }\n",
       "        \n",
       "        for (var i = 0, len = code_blocks.length; i < len; ++i) {\n",
       "          if (\n",
       "              code_blocks[i].innerHTML.indexOf(\"toggle\") !== -1 \n",
       "              || code_blocks[i].innerHTML.indexOf(\"button onclick\") !== -1\n",
       "             ) {\n",
       "            code_blocks[i].style.display = \"none\";\n",
       "          }\n",
       "        }\n",
       "        for (var i = 0, len = code_blocks.length; i < len; ++i) {\n",
       "          if (code_blocks[i].innerHTML.indexOf(\"hide_comment\") !== -1) {\n",
       "            code_blocks[i].style.display = \"none\";\n",
       "            if (isHtml) {\n",
       "              answer_block = code_blocks[i].nextElementSibling.nextElementSibling;\n",
       "              while (answer_block.innerHTML.indexOf(\"blacksquare\") == -1) {\n",
       "                  answer_block.style.display = \"none\";\n",
       "                  answer_block = answer_block.nextElementSibling;\n",
       "              }\n",
       "              answer_block.style.display = \"none\";\n",
       "            }\n",
       "            else{\n",
       "              //code_blocks[i].closest(class_answer).nextElementSibling.style.display = \"none\";\n",
       "              answer_block = code_blocks[i].closest(class_answer).nextElementSibling;\n",
       "              while (answer_block.innerHTML.indexOf(\"blacksquare\") == -1) {\n",
       "                  answer_block.style.display = \"none\";\n",
       "                  answer_block = answer_block.nextElementSibling;\n",
       "              }\n",
       "              answer_block.style.display = \"none\";              \n",
       "            }            \n",
       "          }\n",
       "        }\n",
       "      }\n",
       "    });\n",
       "  });\n",
       "</script>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "base_dir = 'D:\\\\GitHub\\\\Optimization-and-Learning\\\\data\\\\neural_networks'\n",
    "\n",
    "%run ../initscript.py\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy.stats as st\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from ipywidgets import *\n",
    "%matplotlib inline\n",
    "import tensorflow as tf\n",
    "tf.logging.set_verbosity(tf.logging.ERROR)\n",
    "\n",
    "# import sys\n",
    "# sys.path.append('modules')\n",
    "# import NeuralNet as nn\n",
    "\n",
    "from keras import optimizers\n",
    "from keras import backend as K\n",
    "from keras import models\n",
    "from keras import layers\n",
    "from keras import initializers\n",
    "from keras.utils import to_categorical\n",
    "\n",
    "def sinusoidal(x):\n",
    "    return np.sin(np.pi * x)\n",
    "\n",
    "def heaviside(x):\n",
    "    return 0.5 * (np.sign(x) + 1)\n",
    "\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Neural Networks\n",
    "\n",
    "The linear model takes general form\n",
    "\\begin{align*}\n",
    "\\mathbf{f}(\\mathbf{x},\\mathbf{w}) = f \\left( \\sum_{i=0}^{m} w_i \\phi_i(\\mathbf{x})\\right)\n",
    "\\end{align*}\n",
    "\n",
    "where\n",
    "\n",
    "- $f(\\cdot)$ is a nonlinear activation function (such as $\\sigma$) in the case of classification,\n",
    "\n",
    "- $f(\\cdot)$ is the\tidentity in the case of regression.\n",
    "\n",
    "Our goal is to extend this model by making the basis functions $\\phi_i(\\mathbf{x})$ depend on parameters and then to allow these parameters to be adjusted, along with the coefficients $\\{w_j\\}$ during training.\n",
    "\n",
    "This leads to the basic neural network model, which can be described a series of functional transformations. Consider a two-layer network diagram:\n",
    "\n",
    "<img src=\"https://github.com/ming-zhao/Optimization-and-Learning/raw/master/figures/feed_forward.png\" width=\"300\">\n",
    "\n",
    "- We call it two-layer network because it is the number of layers of adaptive weights.\n",
    "\n",
    "- The network has no closed directed cycles so that outputs are deterministic functions of the inputs.\n",
    "\n",
    "The corresponding network function is\n",
    "\n",
    "\\begin{align*}\n",
    "y_k(\\mathbf{x},\\mathbf{w}) = f \\overbrace{\\left( \\sum_{j=0}^{\\ell_2} w^{(2)}_{kj} h\\underbrace{\\left( \\sum_{i=0}^{\\ell_1} w^{(1)}_{ji} x_i\\right)}_{a_j}\\right)}^{a_k}\n",
    "\\end{align*}\n",
    "\n",
    "The quantities $a_j$, $a_k$ are *activations*. $h(\\cdot)$ is called *activation* function which is differentiable and nonlinear.\n",
    "\n",
    "Due to symmetry, multiple distinct choices for the weight vector $\\mathbf{w}$ can give the same mapping function."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Keras\n",
    "\n",
    "Keras is a deep-learning framework for Python that provides a convenient way to define and train almost any kind of deep-learning model.\n",
    "\n",
    "Let's look at an example of applying neural network on the MINST dataset to classify handwritten digits.\n",
    "\n",
    "There is a set of 60,000 training images, plus 10,000 test images, assembled by the National Institute of Standards and Technology (NIST). Each image is a gray scale 28 $\\times$ 28 pixels handwritten digits. we’re trying to classify images into their 10 categories (0 through 9)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training images:(60000, 28, 28), test images:(10000, 28, 28)\n"
     ]
    }
   ],
   "source": [
    "from keras.datasets import mnist\n",
    "(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\n",
    "print('training images:{}, test images:{}'.format(train_images.shape, test_images.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def showimg(data, idx):\n",
    "    span = 5\n",
    "    if data=='train':\n",
    "        if idx+span<train_images.shape[0]:\n",
    "            images = train_images\n",
    "            labels = train_labels\n",
    "        else:\n",
    "            print('Index is out of range.')\n",
    "    if data=='test':\n",
    "        if idx+span<test_images.shape[0]:\n",
    "            images = test_images\n",
    "            labels = test_labels\n",
    "        else:\n",
    "            print('Index is out of range.')\n",
    "    plt.figure(figsize=(15,3))\n",
    "    for i in range(span):\n",
    "        plt.subplot(1, 5, i + 1)\n",
    "        digit = images[idx+i]\n",
    "        plt.imshow(digit, cmap=plt.cm.binary)\n",
    "        plt.title('Index:{}, Label:{}'.format(idx+i, labels[idx+i]), fontsize = 12)\n",
    "    plt.show()\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e39de2a2c881429e94b93f4ba2d82c61",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(RadioButtons(description='Data:', options=('train', 'test'), value='train'), IntText(val…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "interact(showimg,\n",
    "    data = widgets.RadioButtons(options=['train', 'test'],\n",
    "                                value='train', description='Data:', disabled=False),\n",
    "    idx = widgets.IntText(value=7, description='Index:', disabled=False));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Network Architecture\n",
    "\n",
    "Tensors are fundamental to the data representations for neural networks — so fundamental that Google’s TensorFlow was named after them.\n",
    "\n",
    "<img src=\"https://github.com/ming-zhao/Business-Analytics/raw/master/images/tensor.png\" width=\"500\">\n",
    "\n",
    "- Scalars: 0 dimensional tensors\n",
    "\n",
    "- Vectors: 1 dimensional tensors\n",
    "\n",
    "- Matrix: 2 dimensional tensors\n",
    "\n",
    "Let's make data tensors more concrete with real-world examples:\n",
    "\n",
    "- Vector data — 2D tensors of shape (samples, features)\n",
    "\n",
    "- Timeseries data or sequence data — 3D tensors of shape (samples, timesteps, features)\n",
    "\n",
    "- Images — 4D tensors of shape (samples, height, width, channels) or (samples, channels, height, width)\n",
    "\n",
    "- Video — 5D tensors of shape (samples, frames, height, width, channels) or (samples, frames, channels, height, width)\n",
    "\n",
    "The core building block of neural networks is the *layer*, a data-processing module working as a filter for data. Specifically, layers extract representations out of the data fed into them in a more useful form which is often called features.\n",
    "\n",
    "Most of deep learning consists of chaining together simple layers that will implement a form of progressive data distillation. A deep-learning model is like a sieve for data processing, made of a succession of increasingly refined data filters the layers.\n",
    "\n",
    "```python\n",
    "network = models.Sequential()\n",
    "network.add(layers.Dense(512, activation='relu', input_shape=(28 * 28,)))\n",
    "network.add(layers.Dense(10, activation='softmax'))\n",
    "```\n",
    "\n",
    "Here, our network consists of a sequence of two densely connected (fully connected) layers. The second (and last) layer is a\n",
    "10-way softmax layer, which means it will return an array of 10 probability scores (summing to 1). Each score will be the probability that the current digit image belongs to one of our 10 digit classes."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Compilation\n",
    "\n",
    "Before training the network, we need to perform a compilation step by setting up:\n",
    "\n",
    "- An optimizer: the mechanism to improve its performance on the training data\n",
    "\n",
    "- A loss function: the measurement of its performance on the training data\n",
    "\n",
    "- Metrics to monitor during training and testing\n",
    "\n",
    "```python\n",
    "network.compile(optimizer='rmsprop',\n",
    "                loss='categorical_crossentropy',\n",
    "                metrics=['accuracy'])\n",
    "```\n",
    "\n",
    "### Data Preparation\n",
    "\n",
    "Before training, we preprocess our data by reshaping and scaling it. We also need to categorically encode the labels so that "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_images_reshape = train_images.reshape((60000, 28 * 28))\n",
    "train_images_reshape = train_images_reshape.astype('float32') / 255\n",
    "test_images_reshape = test_images.reshape((10000, 28 * 28))\n",
    "test_images_reshape = test_images_reshape.astype('float32') / 255\n",
    "\n",
    "train_labels_cat = to_categorical(train_labels)\n",
    "test_labels_cat = to_categorical(test_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Training the Network\n",
    "\n",
    "We train the network as follows\n",
    "```python\n",
    "network.fit(train_images_reshape, train_labels_cat, epochs=5, batch_size=128, verbose=1);\n",
    "```\n",
    "\n",
    "The network will start to iterate on the training data in mini-batch of 128 samples, 5 times over (each iteration over all the training data is called an *epoch*). At each iteration, the network will compute the gradient of the weights with regard to the loss on the batch, and update the weights accordingly. After these 5 epochs, the network will have performed 2345 = 5 $\\times$ ceil(60000 $\\div$ 128) gradient updates.\n",
    "\n",
    "Batch size impacts learning significantly. If your batch size is big enough, this will provide a stable enough estimate of what the gradient of the full dataset would be. By taking samples from your dataset, you estimate the gradient while reducing computational cost significantly. \n",
    "\n",
    "The lower you go, the less accurate your estimate will be, however in some cases these noisy gradients can actually help escape local minimum. When it is too low, your network weights can just jump around if your data is noisy and it might be unable to learn or it converges very slowly, thus negatively impacting total computation time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def train_MNIST():\n",
    "    # We can run this function to see the trainning output.\n",
    "    model = models.Sequential()\n",
    "    model.add(layers.Dense(512, activation='relu', input_shape=(28 * 28,)))\n",
    "    model.add(layers.Dense(10, activation='softmax'))\n",
    "    model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "    model.fit(train_images_reshape, train_labels_cat, epochs=5, batch_size=128, verbose=1);\n",
    "    model.save(base_dir+\"\\\\minst.h5\")\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10000/10000 [==============================] - 0s 48us/step\n",
      "Test accuracy is 97.99%\n"
     ]
    }
   ],
   "source": [
    "model = models.load_model(base_dir+\"\\\\minst.h5\")\n",
    "test_loss, test_acc = model.evaluate(test_images_reshape, test_labels_cat)\n",
    "print('Test accuracy is {}%'.format(round(test_acc*100,2)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The test set accuracy turns out to be 97.99%"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Prediction\n",
    "\n",
    "We perform prediction on the test dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def misclassifiedimg(index):\n",
    "    predicted = model.predict_classes(test_images_reshape)\n",
    "    result = abs(predicted - test_labels)\n",
    "    misclassified = np.where(result>0)[0]\n",
    "    print('Total number of misclassified images is {}'.format(misclassified.shape[0]),\n",
    "         'Examples of misclassified images {}-{}'.format(index, index+4))\n",
    "\n",
    "    plt.figure(figsize=(13,3))\n",
    "    for i in range(5):\n",
    "        plt.subplot(1, 5, i + 1)\n",
    "        idx = misclassified[i+index]\n",
    "        digit = test_images[idx]\n",
    "        plt.imshow(digit, cmap=plt.cm.binary)\n",
    "        plt.title('Predicted:{}, Label:{}'.format(predicted[idx], test_labels[idx]), fontsize = 12)\n",
    "    plt.show()\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "dc4a05f64e094af4af7141dfef497be4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(IntText(value=7, description='Index:'), Output()), _dom_classes=('widget-interact',))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "interact(misclassifiedimg, index = widgets.IntText(value=7, description='Index:', disabled=False));"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "K.clear_session()\n",
    "del model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feedfoward Neural Networks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Feedfoward Neural Networks (Deep feedforward networks, multilayer perceptrons (MLPs)) are the quintessential deep learning models. We demonstrate the capability of a two-layer network to model a broad range of functions, such as $x^2$, $\\sin(x)$,  $\\text{abs}(x)$ and $\\text{heaviside}(x)$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def create_data(func, n=50):\n",
    "    x = np.linspace(-1, 1, n)[:, None]\n",
    "    return x, func(x)\n",
    "func_list = [np.square, sinusoidal, np.abs, heaviside]\n",
    "\n",
    "def train_feedfowardNN():\n",
    "    for i, func in enumerate(func_list):\n",
    "        x_train, y_train = create_data(func)\n",
    "        model = models.Sequential()\n",
    "        model.add(layers.Dense(3, activation='tanh', input_shape=(1,), name='mid_layer'))\n",
    "        model.add(layers.Dense(1))\n",
    "        model.compile(optimizer='Adam', loss='mean_squared_error', metrics=['mse'])\n",
    "        model.fit(x_train, y_train, epochs=10000, batch_size=1, verbose=0);\n",
    "        y = model.predict(x_test)\n",
    "        intermediate_output = models.Model(inputs=model.input,\n",
    "                                           outputs=model.get_layer('mid_layer').output).predict(x_test)\n",
    "        df = pd.DataFrame(data=np.concatenate((y, intermediate_output), axis=1),\n",
    "                          columns=['y', 'unit1', 'unit2', 'unit3'])\n",
    "        df.to_csv(base_dir+'\\\\results_{}.csv'.format(i), header=True, index=False)\n",
    "        K.clear_session()\n",
    "        del model\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The prediction results and outputs for 3 hidden units are shown in the graph."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x648 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test = np.linspace(-1, 1, 1000)\n",
    "plt.figure(figsize=(12, 9))\n",
    "for i, func in enumerate(func_list):\n",
    "    plt.subplot(2, 2, i+1)\n",
    "    x_train, y_train = create_data(func)\n",
    "    df = pd.read_csv(base_dir+'\\\\results_{}.csv'.format(i))\n",
    "    \n",
    "    plt.title(\"func = {}\".format(func.__name__))\n",
    "    plt.scatter(x_train, y_train, s=5, label='func')\n",
    "    plt.plot(x_test, df.y, color=\"r\", label='fitting')\n",
    "    for j in range(3):\n",
    "        plt.plot(x_test, df['unit'+str(j+1)], linestyle='dashed', label=r\"hidden unit-{}\".format(j))\n",
    "plt.legend(bbox_to_anchor=(1.02, 0.55), loc=2, borderaxespad=0.5)\n",
    "plt.show()\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Network Training"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We minimize the error function (generally nonconvex)\n",
    "\\begin{align*}\n",
    "E(\\mathbf{w}) = \\frac{1}{2} \\sum_{i=1}^{n} \\lVert \\mathbf{f}(\\mathbf{x}_i, \\mathbf{w}) - \\mathbf{y}_i \\rVert^2 = \\sum_{i=1}^{n} E_i(\\mathbf{w})\n",
    "\\end{align*}\n",
    "\n",
    "Error Backpropagation is applied to derive $\\frac{\\partial E_i}{\\partial w_{ji}}$:\n",
    "\n",
    "- Apply an input vector $\\mathbf{x}_n$ to the network and forward propagate through the network to find the activations of all the hidden and output units where\n",
    "\n",
    "\\begin{align*}\n",
    "z_j = h(a_j), \\text{ and } a_j = \\sum_i w_{ji} z_i\n",
    "\\end{align*}\n",
    "\n",
    "In the recursion, $z_i = x_i$ for the input and $z_j = y_k$ for the output.\n",
    "\n",
    "- Evaluate $\\delta_k = y_k - t_k$ for all the output units where\n",
    "\n",
    "\\begin{align*}\n",
    "\\delta_j \\equiv \\frac{\\partial E_i}{\\partial a_j}\n",
    "\\end{align*}\n",
    "\n",
    "- Obtain $\\delta_j$ for each hidden unit in the network by backpropagation:\n",
    "\\begin{align*}\n",
    "\\delta_j \\equiv \\frac{\\partial E_i}{\\partial a_j} = \\sum_{k} \\frac{\\partial E_i}{\\partial a_k} \\frac{\\partial a_k}{\\partial a_j} = h^\\prime(a_j) \\sum_{k} w_{kj} \\delta_k\n",
    "\\end{align*}\n",
    "\n",
    "Note that the recursion starts from the output and goes through the network backward.\n",
    "\n",
    "- Evaluate the required derivatives\n",
    "\n",
    "\\begin{align*}\n",
    "\\frac{\\partial E_i}{\\partial w_{ji}} = \\frac{\\partial E_i}{\\partial a_{j}} \\frac{\\partial a_j}{\\partial w_{ji}} = \\delta_j z_i\n",
    "\\end{align*}\n",
    "\n",
    "The technique of backpropagation can also be applied to the calculation of Jacobian and Hessian matrix where\n",
    "\n",
    "\\begin{align*}\n",
    "J_{ki} \\equiv \\frac{\\partial y_k}{\\partial x_i}, \\text{ and } \\mathbf{H} \\sim \\frac{\\partial^2 E}{\\partial w_{ji} \\partial w_{lk}}\n",
    "\\end{align*}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We consider a simple task: learning the XOR function to demonstrate the training process.\n",
    "\n",
    "The XOR function (\"exclusive or\") is an operation on two binary values such that\n",
    "\n",
    "\\begin{align*}\n",
    "f(x_1, x_2) = \\left\\{ \\begin{aligned}\n",
    "&0 && \\text{ if } x_1 = x_2 \\\\\n",
    "&1 && \\text{ otherwise.}\n",
    "\\end{aligned} \\right.\n",
    "\\end{align*}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "x_train = np.array([[0, 0],[0, 1],[1, 0],[1, 1]])\n",
    "t_train = np.array([0, 1, 1, 0])\n",
    "x0, x1 = np.meshgrid(np.linspace(0, 1, 100), np.linspace(0, 1, 100))\n",
    "x_test = np.array([x0, x1]).reshape(2, -1).T\n",
    "t = LinearRegression().fit(x_train, t_train).predict(x_test)\n",
    "\n",
    "plt.figure(figsize=(5, 4))\n",
    "plt.scatter(x_train[:, 0], x_train[:, 1], c=t_train)\n",
    "levels = np.linspace(0, 1, 5)\n",
    "plt.contourf(x0, x1, np.asarray(t).reshape(100, 100), levels, alpha=0.2)\n",
    "plt.colorbar()\n",
    "plt.show()\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The dots indicate the target values of inputs. It is clear that linear function cannot describe the feature, because any hyperplane will have both target values 0 and 1 on one-side. This is demonstrated by a linear regression model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr>\n",
    "\n",
    "We provide details on learning the XOR function by using a simple neural network.\n",
    "\n",
    "We have\n",
    "\n",
    "- input\n",
    "\n",
    "\\begin{align}\n",
    "\\mathbf{x} = \\left( \\begin{array}{l}\n",
    "0 \\\\\n",
    "0 \\\\\n",
    "1 \\\\\n",
    "\\end{array} \\right) \\text{ or }\n",
    "\\left( \\begin{array}{l}\n",
    "0 \\\\\n",
    "1 \\\\\n",
    "1 \\\\\n",
    "\\end{array} \\right) \\text{ or }\n",
    "\\left( \\begin{array}{l}\n",
    "1 \\\\\n",
    "0 \\\\\n",
    "1 \\\\\n",
    "\\end{array} \\right) \\text{ or }\n",
    "\\left( \\begin{array}{l}\n",
    "1 \\\\\n",
    "1 \\\\\n",
    "1 \\\\\n",
    "\\end{array} \\right) \\nonumber\n",
    "\\end{align}\n",
    "\n",
    "- hidden layer\n",
    "\n",
    "\\begin{align}\n",
    "a^1_{j} = {\\mathbf{w}^1_j}^T \\mathbf{x} \\text{, } \\mathbf{a}^1 = (a^1_{j} :\\forall j)^T \\text{ and } z_{j} = h(a^1_{j}) \\text{, } \\mathbf{z} = (z_{j}: \\forall j)^T \\nonumber\n",
    "\\end{align}\n",
    "\n",
    "- output\n",
    "\n",
    "\\begin{align}\n",
    "a^2_{k} = {\\mathbf{w}^2_{k}}^T \\mathbf{z} \\text{ and } y = y_k = h(a^2_{k}) \\nonumber\n",
    "\\end{align}\n",
    "\n",
    "Note that, in this case, $k = \\{1\\}$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> Feed-Forward </b>\n",
    "\n",
    "To apply stochastic gradient decent, we consider one instance and its error function\n",
    "\n",
    "\\begin{align}\n",
    "E_i = \\frac{1}{2} \\left( y - t \\right)^2 \\nonumber\n",
    "\\end{align}\n",
    "\n",
    "\\begin{align}\n",
    "\\mathbf{z} = h\\left({\\mathbf{W}^1}^T \\mathbf{x} \\right) \\text{ and } y = h\\left({\\mathbf{w}^2}^T \\mathbf{z}\\right) \\nonumber\n",
    "\\end{align}\n",
    "\n",
    "where\n",
    "\n",
    "\\begin{align}\n",
    "\\mathbf{W}^{1} = (\\mathbf{w}^1_{j} : \\forall j) \\nonumber\n",
    "\\end{align}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> Derivatives </b>\n",
    "\n",
    "Let $h = \\tanh$.\n",
    "\n",
    "\\begin{align}\n",
    "\\sigma^\\prime(x) &= \\sigma(x) (1- \\sigma(x)) \\nonumber\\\\\n",
    "\\tanh^\\prime(x) &= 1 -\\tanh^2(x) \\nonumber\n",
    "\\end{align}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> Error Backpropagation </b>\n",
    "\n",
    "\\begin{align}\n",
    "\\delta^2_{k} &\\equiv \\frac{\\partial E_i}{\\partial a^2_k} = \\frac{\\partial E_i}{\\partial y} \\frac{\\partial y}{\\partial a^2_k} = (y-t) h^\\prime(a^2_k) = (y-t) (1- h^2(a^2_k)) = (y-t) (1- y^2) \\nonumber \\\\\n",
    "\\delta^1_{j} &\\equiv \\frac{\\partial E_i}{\\partial a^1_{j}} = \\sum_k \\frac{\\partial E_i}{\\partial a^2_{k}} \\frac{\\partial a^2_{k}}{\\partial z_j} \\frac{\\partial z_j}{\\partial a^1_{j}} = h^\\prime(a^1_{j}) \\sum_{k} \\delta^2_{k} w^2_{k,j} = (1-z_j^2) \\sum_{k} \\delta^2_{k} w^2_{k,j} \\nonumber\n",
    "\\end{align}\n",
    "\n",
    "\\begin{align}\n",
    "\\frac{\\partial E_i}{\\partial \\mathbf{w}^2_k} & = \\frac{\\partial E_i}{\\partial a^2_k} \\frac{\\partial a^2_k}{\\partial \\mathbf{w}^2_k} = \\delta^2_{k} \\mathbf{z} \\nonumber \\\\\n",
    "\\frac{\\partial E_i}{\\partial \\mathbf{w}^1_j} & = \\frac{\\partial E_i}{\\partial a^1_j} \\frac{\\partial a^1_j}{\\partial \\mathbf{w}^1_j} = \\delta^1_{j} \\mathbf{x} \\nonumber\n",
    "\\end{align}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The code realize the neural network and backpropagation algorithm. The plot shows that the XOR function is correctly learned by our neural network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def sigmoid(x):\n",
    "    return 1.0/(1.0 + np.exp(-x))\n",
    "\n",
    "def sigmoid_prime(x):\n",
    "    return x*(1.0-x)\n",
    "\n",
    "def tanh(x):\n",
    "    return np.tanh(x)\n",
    "\n",
    "def tanh_prime(x):\n",
    "    return 1.0 - x**2\n",
    "\n",
    "class NeuralNetwork:\n",
    "    def __init__(self, layers, activation='tanh'):\n",
    "        if activation == 'sigmoid':\n",
    "            self.activation = sigmoid\n",
    "            self.activation_prime = sigmoid_prime\n",
    "        elif activation == 'tanh':\n",
    "            self.activation = tanh\n",
    "            self.activation_prime = tanh_prime\n",
    "        \n",
    "        # Set weights\n",
    "        self.weights = []\n",
    "        # layers = [2,2,1]\n",
    "        # range of weight values (-1,1)\n",
    "        # input and hidden layers - random((2+1, 2+1)) : 3 x 3\n",
    "        for i in range(1, len(layers) - 1):\n",
    "            r = 2*np.random.random((layers[i-1] + 1, layers[i] + 1)) -1\n",
    "            self.weights.append(r)\n",
    "        # output layer - random((2+1, 1)) : 3 x 1\n",
    "        r = 2*np.random.random( (layers[i] + 1, layers[i+1])) - 1\n",
    "        self.weights.append(r)\n",
    "\n",
    "    def fit(self, X, t, learning_rate=0.2, epochs=100000):\n",
    "        ones = np.atleast_2d(np.ones(X.shape[0]))\n",
    "        X = np.concatenate((ones.T, X), axis=1)\n",
    "        # Add the bias unit to the input layer X, so that\n",
    "        # X = [[1. 0. 0.]\n",
    "        #      [1. 0. 1.]\n",
    "        #      [1. 1. 0.]\n",
    "        #      [1. 1. 1.]]\n",
    "         \n",
    "        for k in range(epochs):\n",
    "            i = np.random.randint(X.shape[0])\n",
    "            z = [X[i]]\n",
    "            \n",
    "            for l in range(len(self.weights)):\n",
    "                z.append(self.activation(np.array(self.weights[l]).T @ np.array(z[l])))\n",
    "\n",
    "            # backpropagation\n",
    "            # output layer y = z[-1]\n",
    "            error = z[-1] - t[i]\n",
    "            deltas = [error * self.activation_prime(z[-1])]\n",
    "            for l in range(len(self.weights) - 1, 0, -1): \n",
    "                deltas.append(np.dot(self.weights[l], deltas[-1]) * self.activation_prime(z[l]))\n",
    "            deltas.reverse()\n",
    "\n",
    "            for i in range(len(self.weights)):\n",
    "                self.weights[i] -= learning_rate * np.array(z[i])[:,None].dot(np.array(deltas[i])[:,None].T)\n",
    "\n",
    "            if k % 10000 == 0: print('epochs:{}, error={}'.format(k, error))\n",
    "\n",
    "    def predict(self, X): \n",
    "        ones = np.atleast_2d(np.ones(X.shape[0]))\n",
    "        y = np.concatenate((ones.T, X), axis=1)\n",
    "        for l in range(0, len(self.weights)):\n",
    "            y = self.activation(np.dot(y, self.weights[l]))\n",
    "        return y\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epochs:0, error=[-0.07482236]\n",
      "epochs:10000, error=[0.00031893]\n",
      "epochs:20000, error=[0.00029467]\n",
      "epochs:30000, error=[-0.00716532]\n",
      "epochs:40000, error=[-0.00477388]\n",
      "epochs:50000, error=[-0.00421749]\n",
      "epochs:60000, error=[-1.54676533e-07]\n",
      "epochs:70000, error=[2.76519559e-05]\n",
      "epochs:80000, error=[4.02423604e-05]\n",
      "epochs:90000, error=[-0.00302211]\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAToAAAD8CAYAAADnhGhBAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAWhklEQVR4nO3df5DU9X3H8ecLDu6ESBTvNAmgIEUNpsExF8kPm2jTRiDpWGfMBHRidZJhTEImnU4bbRuTzCQzSZrJTJr4g1wdQtM2UqcaQ1qCZuoYjZbIkQCCxgj4AyQDh4hE5ICDd//YPViWvdvv7e7tfve7r8fMjfv9fj/f7/c9d+6L7/fz/X4/X0UEZmZZNqbRBZiZjTYHnZllnoPOzDLPQWdmmeegM7PMc9CZWeY56Mys7iQtk7Rb0qYhlkvSdyVtkbRR0qUFy+ZJeja/7NYk+3PQmVkjLAfmDbN8PjAr/7MYuAtA0ljgjvzy2cAiSbPL7cxBZ2Z1FxGPAnuHaXI18MPIWQOcIemtwGXAlojYFhGHgRX5tsNqq0XRlejs7Izp06c3avdmLWvdunV7IqJrpOt96MOXx95X9iVqu/7XmzcD/QWzeiKiZwS7mwJsL5jekZ9Xav7cchtrWNBNnz6d3t7eRu3erGVJerGS9fa+so+Hn7g3UdvJHRf3R0R3JfvJU4l5Mcz8YTUs6MzMhrEDmFYwPRXYCYwfYv6w3EdnZmm0Erghf/X1PcBrEfF7YC0wS9IMSeOBhfm2w/IRnZnVnaR7gCuATkk7gC8D4wAiYimwClgAbAHeAG7KLxuQtAR4EBgLLIuIzeX256Azs7qLiEVllgfw2SGWrSIXhIn51NXMMs9BZ2aZ56Azs8xLfR9dHHuNOHg/HPktjLsYnXYNGnN6o8sya7htG1/koX99hIOvH+Tya+bSfdUlSKVuM7OyQSdpGfBRYHdEvKPEcgH/TO4KyRvAjRHx61oUFwMvEK98DOIQ0A/9q4nX74Sz/gu1Ta3FLsya0gO3/4y7b/l3jhwe4NjRYzz8o8fpvmoOt937N4wZ4xO1Ykl+I8up4OHbWoj9X4bYz4knSQ5C7CP+8LVa7cKs6ezre41/+cK/cejgYY4dPQZA/4F+eh9cz9rV6xtcXTqVPaKLiEclTR+myfGHb4E1ks6Q9Nb8zX0Viwg4/CsGn+7Yd7Qgk9/4JZrwdDWbtwzY+cYZo76Prbv2MnPiiB8LHdL253czs3NyVdtYu3o9mnAax49T+g/l/nPgEI/dt4a5Cy4deuUWVYtj3KEevj2FpMWSeiX19vX1Jdj02NKzNW6kNVoG9Q88V5f9bD2Q5P/VEWxvz3CDdpQ3rr2Nk7riOtoBGDNGtE8YX9W2s6oWQZf4IduI6ImI7ojo7uoa/l9JSdCxgPzN0gXaoP2DlVVqmXL+pC76B54b1cCbeU7u6KtWYTdtxtm57VURdm9/74Ulv2DjOsZx1Y1XVrzdLKtF0A318G3VNOk2aLsANAFoz/20nQ8TPlGLzVsGnD8p9w9mK4Vde8c4bv72X9E+sZ2Oie20T2hnXMc4bvjKx7ngXTNrUmPW1OL2kpXAEkkryI0L9Vq1/XODNGYSnHU/HPkNHHwcxp4LbX/kS+h2kvMndbFtfx/9A8/R0TZrVPYx85zJbN21l60H+mrSZzdtxtlsf343W/fsrajP7sLumXxj9RfZ/PizHOk/woIbLmfyW86suq6sSnJ7SUUP39aKJBh/KYqOWm7WMqZZww5ga4UXKNpPG8+lf/bHAA65MpJcda344VuzemrGsINc4FUadpaM7yy0TGnGPjvIh92evVVfkbXSHHSWOfUKu5nnTK552EH1t5/YqRx0lkn1CDvAYdckHHSWWfUOu7TcfmKnctBZptUz7CA999rZyRx0lnkOO3PQWUtw2LU2B521DIdd63LQWUtx2LUmB521HIdd63HQWUty2LUWB521LIdd63DQWUs7f1LX8QE8R9NohN3g87FWnoPOjOYcrRhygXf49NS/tbThHHRmec06GICV56AzK9Csz8fa8Bx0ZkWa9SKFDc1BZ1aCwy5bHHRmQ3DYZYeDzmwYDrtscNCZleGwa34OOrMEHHbNzUFnlpDDrnk56MxGoFkfGWt1fnbErAK5l2Xnwm40X5YNsHVXLuxq9cLsVuQjOrMK+VS2eTjozKrgsGsODjqzKjns0s9BZ1YDDrt0SxR0kuZJelbSFkm3llj+Zkk/lbRB0mZJN9W+VLN0c9ilV9mgkzQWuAOYD8wGFkmaXdTss8DTETEHuAL4tqTxNa7VLPUcdumU5IjuMmBLRGyLiMPACuDqojYBnC5JwJuAvcBATSs1axIOu/RJch/dFGB7wfQOYG5Rm9uBlcBO4HTg4xFxrHhDkhYDiwHOPffcSuo1awqDYVeve+1seEmO6FRiXhRNXwWsB94GXALcLmnSKStF9EREd0R0d3X55kfLvnod3TWjBH3/fydpff5nk6Sjkibnl70g6an8st5y+0oSdDuAaQXTU8kduRW6Cbg/crYAzwMXJdi2WeY57E6VpO8/Ir4VEZdExCXA3wO/iIjC155dmV/eXW5/SU5d1wKzJM0AXgYWAtcVtXkJ+BDwmKRzgAuBbQm2bdYSco+M9dE/8NyoncaOtkNHj7Btf836A4/3/QNIGuz7f3qI9ouAeyrdWdmgi4gBSUuAB4GxwLKI2Czp5vzypcBXgeWSniJ3qntLROyptCizLGr2sJM6RlJ3Z9EpZU9E9BRMJ+n7z+9XE4B5wJKC2QE8JCmA7xdt+xSJHuqPiFXAqqJ5Sws+7wQ+nGRbZq2s2cNuBPaUOaVM0vc/6C+Ax4tOW98fETslnQ38XNJvI+LRoXbmJyPM6sx9dkCyvv9BCyk6bc0fXBERu4EfkzsVHpKDzqwBHHYn+v7zDxcsJHeL2kkkvRn4IPCTgnkTJZ0++Jnc2eSm4Xbm8ejMGqRe99qlUcK+f4BrgIci4kDB6ucAP849n0Ab8KOIWD3c/hx0Zg3WQv12JynX95+fXg4sL5q3DZgzkn351NUsBXwqO7ocdGYp4bAbPQ46sxRx2I0OB51Zyjjsas9BZ5ZC9XqtYqtw0Jml2GDYOfCq46AzSzmfylbPQWfWBBx21XHQmTUJh13lHHRmTcRhVxkHnVmTcdiNnJ91NWtCxQMC5F7XYkNx0Jk1scHAs+H51NXMMs9BZ2aZ56Azs8xz0JlZ5jnozCzzHHRmlnkOOjPLPAedmWWeg87MMs9BZ2aZ56Azs8xz0JlZ5jnozCzzEgWdpHmSnpW0RdKtQ7S5QtJ6SZsl/aK2ZZqZVa7sME2SxgJ3AH8O7ADWSloZEU8XtDkDuBOYFxEvSTp7tAo2MxupJEd0lwFbImJbRBwGVgBXF7W5Drg/Il4CiIjdtS3TzKxySYJuCrC9YHpHfl6hC4AzJT0iaZ2kG0ptSNJiSb2Sevv6+iqr2MxshJIEnUrMi6LpNuBdwEeAq4DbJF1wykoRPRHRHRHdXV0eGdXM6iPJUOo7gGkF01OBnSXa7ImIA8ABSY8Cc4Df1aRKM7MqJDmiWwvMkjRD0nhgIbCyqM1PgD+R1CZpAjAXeKa2pZqZVabsEV1EDEhaAjwIjAWWRcRmSTfnly+NiGckrQY2AseAuyNi02gWbmaWVKK3gEXEKmBV0bylRdPfAr5Vu9LMzGrDT0aYWeY56Mws8xx0ZpZ5DjozyzwHnZllnoPOzDLPQWdmmeegM7PMc9CZWeY56Mws8xx0ZtYQ5V7RkH89w2v5VzSsl/SlpOsWS/Ssq5lZLSV5RUPeYxHx0QrXPc5HdGbWCEle0VCzdX1EZ2aJHDoywNZde5M275TUWzDdExE9BdOlXtEwt8R23itpA7nBfv82IjaPYN3jHHRmlkj7mDZmTkz8CoQ9EdE9zPIkr2j4NXBeRLwuaQHwADAr4bon8amrmTVC2Vc0RMT+iHg9/3kVME5SZ5J1iznozKwRyr6iQdJbJCn/+TJyefVKknWL+dTVzOouySsagGuBT0saAA4CCyMigJLrDrc/B52ZNUS5VzRExO3A7UnXHY5PXc0s8xx0ZpZ5DjozyzwHnZllnoPOzDLPQWdmmeegM7PMc9CZWeY56Mws8xx0ZpZ5iYIu6bDFkt4t6aika2tXoplZdcoGXcGwxfOB2cAiSbOHaPdNcg/ampmlRpIjuqTDFn8OuA/YXcP6zMyqliToSg1bPKWwgaQpwDXAUoYhabGkXkm9fX19I63VzKwiSYIuybDF3wFuiYijw20oInoiojsiuru6Eg/JbGZWlSTj0SUZtrgbWJEfDLQTWCBpICIeqEmVZmZVSBJ0x4ctBl4mN2zxdYUNImLG4GdJy4H/dsiZWVqUDbqEQx6bmaVWoqHUyw15XDT/xurLMjOrHT8ZYWaZ56Azs8xz0JlZ5jnozCzzHHRmlnkOOjPLPAedmWWeg87MMs9BZ2aZ56Azs8xz0JlZ5jnozCzzHHRmlnkOOjPLPAedmWWeg87MMs9BZ2aZ56Azs8xz0JlZ5jnozCzzHHRmlnkOOjPLPAedmWWeg87MMs9BZ2aZ56Azs8xrmqDbtr+Pbfv7Gl2GmdWIpHmSnpW0RdKtJZZfL2lj/ucJSXMKlr0g6SlJ6yX1lttX0wRdR9ssAIedWQZIGgvcAcwHZgOLJM0uavY88MGIeCfwVaCnaPmVEXFJRHSX21/TBB047Mwy5DJgS0Rsi4jDwArg6sIGEfFERLyan1wDTK10Z20Vl9kgJ8LuOQDOn9TVyHLMWsaRwwNsf3530uadRaeUPRFReEQ2BdheML0DmDvM9j4J/KxgOoCHJAXw/aJtnyJR0EmaB/wzMBa4OyK+UbT8euCW/OTrwKcjYkOSbVeqo20W/QPPsW1/n8POrA7a29qY2Tk5afM9ZU4pVWJelGwoXUku6C4vmP3+iNgp6Wzg55J+GxGPDrWzsqeuNTqXHhU+lTVrWjuAaQXTU4GdxY0kvRO4G7g6Il4ZnB8RO/P/3Q38mNyp8JCS9NHV9Vx6pBx2Zk1pLTBL0gxJ44GFwMrCBpLOBe4HPhERvyuYP1HS6YOfgQ8Dm4bbWZKgK3UuPWWY9sXn0oWFL5bUK6m3r692weSwM2suETEALAEeBJ4B7o2IzZJulnRzvtmXgLOAO4tuIzkH+KWkDcCTwP9ExOrh9pekj67ac+kTK+U6DHsAuru7S26jUu6zM2suEbEKWFU0b2nB508Bnyqx3jZgTvH84SQ5oqvqXLqeOtpm0dE2y0d2ZnaSJEFX8bl0owyGnQPPzCBB0FV5Lt0w7rczs0GJ7qOr9Fy60dxvZ2bQZI+AVcJHdmaW+aADh51Zq2uJoAOHnVkra5qg27prb9XbcNiZtaamCTqoXdj59hOz1tI0QTdzYhczJ3axdddeH92Z2Yg0TdANmjkxd5uIw87Mkmq6oAOHnZmNTFMGHTjszCy5pg06cNiZWTJNHXTgsDOz8po+6KC2V2QddmbZk4mgG1SrozuPa2eWLZkKOqj9qaxvLDZrfpkLOnC/nZmdLJNBBw47Mzshs0EHDjszy2maoNv+/O6K1vMVWTNrmqCb2TmZ7c/vrirwoDZXZMFhZ9ZMmiboIBd2UN3RHTjszFpNUwUdOOzMbOSaLujAYWdmI9OUQQfpCjs/RWGWbk0bdJALu2ouUvgpCrPW0NRBN6iaozvffmKWfZkIOkjXqSw47MzSJDNBBw47MystU0EH6em3c9iZpUdTBN2ru/axdcOL/OHV1xOvU22/HTjsLN0ighjYTgw8R8SRRpeTaomCTtI8Sc9K2iLp1hLLJem7+eUbJV1ai+IGjgzwzRu+x/XTP8Odn1/GP3706/zH1+7j6MCxROs77CyrYuBl2LcE9n0BXvsKsfu9RP/DjS4rtcoGnaSxwB3AfGA2sEjS7KJm84FZ+Z/FwF21KO4HX7yHx+5bw5FDRzj4ej8DhwZYu/o3rP5B8j+ow86yJuIo7P8SHP09cAjiIMR+Yt9fEwMvNrq8VEpyRHcZsCUitkXEYWAFcHVRm6uBH0bOGuAMSW+tprCI4Kd3PcShg4dPmn+4/wiPrHhiRNuq1e0n1XDYWc0c2QjRX2LBUeLgvXUvpxkkCbopwPaC6R35eSNtg6TFknol9fb1Df+Fjwj6Dxwquaz/9VJ/5OHV4opsrcLOrCrHXgOixIIjcHRXvatpCm0J2qjEvOLfcpI2REQP0APQ3d1d6i913JgxY5h5yXls+c0LuRn9J0LvovdfxKzZp+RoWbNOzd4RuZhzqlo/52012Ia1shh7OnHwLqC4r3oCav9AI0pKvSRHdDuAaQXTU4GdFbQZsSXf+xTtE9oZMzZX5pixY+iY2MFnvnNjtZs2a1pqmwanfQw4rWBuB7RNh455Daoq3ZIc0a0FZkmaAbwMLASuK2qzElgiaQUwF3gtIn5fbXEXv+9C7njy6/znP/2EbRteZNalM/j4LX/J1At8VGStTZNug/Z3Ewd+BPEGdHwETVyENL7RpaVS2aCLiAFJS4AHgbHAsojYLOnm/PKlwCpgAbAFeAO4qVYFnjd7Gl9YvqRWmzPLBEnQMR91zG90KU0hyREdEbGKXJgVzlta8DmAz9a2NDOz2miKJyPMzKrhoDOzzHPQmVnmOejMLPMcdGbWENUMFlJu3WIOOjOru2oGC0m47kkcdGbWCNUMFpJk3ZMkuo9uNKxbt26PpJGMKdMJ7BmtemrA9VUnzfWluTYYeX3nVbKTTZs3PnjBxVM7EzbvkNRbMN2Tf9Z9UKmBQOYWbWOowUKSrHuShgVdRHSNpL2k3ojoHq16quX6qpPm+tJcG9Svvoio5YO01QwWkmgQkUINCzoza2nVDBYyPsG6J3EfnZk1wvHBQpQbiWAhucFBCq0EbshffX0PJwYLSbLuSZrpiK6nfJOGcn3VSXN9aa4N0l/fKaoZLGSodYfbn3LP45uZZZdPXc0s8xx0ZpZ5qQu6Rr1Dtob1XZ+va6OkJyTNSVN9Be3eLemopGvTVJukKyStl7RZ0i/qVVuS+iS9WdJPJW3I11ezAWYT1LZM0m5Jm4ZY3tDvRepFRGp+yHUsbgXOJ3cJeQMwu6jNAuBn5O6leQ/wq5TV9z7gzPzn+Wmrr6Ddw+Q6e69NS23AGcDTwLn56bPT9LsD/gH4Zv5zF7AXGF+n+j4AXApsGmJ5w74XzfCTtiO6hrxDtpb1RcQTEfFqfnINuXt86iXpozGfA+4DKnv34+jVdh1wf0S8BBARaasvgNMlCXgTuaAbqEdxEfFofn9DaeT3IvXSFnQ1e4fsKBnpvj9J7l/Zeilbn6QpwDXAUuorye/uAuBMSY9IWifphrpVl6y+24G3k7s59Sng8xFR/M7BRmnk9yL10nYfXc3eITtKEu9b0pXkgu7yUa2oaLcl5hXX9x3glog4mjswqZsktbUB7wI+RO5dfv8naU1E/G60iyNZfVcB64E/BWYCP5f0WETsH+3iEmjk9yL10hZ0DXuHbEKJ9i3pncDdwPyIeKVOtUGy+rqBFfmQ6wQWSBqIiAdSUNsOYE9EHAAOSHoUmAPUI+iS1HcT8I3IdYptkfQ8cBHwZB3qK6eR34v0a3QnYeEPueDdBszgRIfwxUVtPsLJna5Ppqy+c8ndyf2+NP7+itovp34XI5L87t4O/G++7QRgE/COFNV3F/CV/OdzyL3nuLOOf9/pDH0xomHfi2b4SdURXTT4HbI1qu9LwFnAnfmjpoGo08gXCetriCS1RcQzklYDG4FjwN0RUfJ2ikbUB3wVWC7pKXKBcktE1GX4Jkn3AFcAnZJ2AF8GxhXU1rDvRTPwI2Bmlnlpu+pqZlZzDjozyzwHnZllnoPOzDLPQWdmmeegM7PMc9CZWeb9P+NAFDhw7Ji5AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 360x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "nn = NeuralNetwork([2,2,1], activation='tanh')\n",
    "nn.fit(x_train, t_train)\n",
    "np.set_printoptions(suppress=True)\n",
    "# print(np.append(x_train, nn.predict(x_train), axis=1))\n",
    "plt.figure(figsize=(5, 4))\n",
    "plt.scatter(x_train[:, 0], x_train[:, 1], c=t_train)\n",
    "x0, x1 = np.meshgrid(np.linspace(0, 1, 100), np.linspace(0, 1, 100))\n",
    "x_test = np.array([x0, x1]).reshape(2, -1).T\n",
    "levels = np.linspace(0, 1, 5)\n",
    "plt.contourf(x0, x1, np.asarray(nn.predict(x_test)).reshape(100, 100), levels, alpha=0.2)\n",
    "plt.colorbar()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are attempting to predict the median price of homes in a given Boston suburb in the mid-1970s, given a few data points about the suburb at the time, such as the crime rate, the local property tax rate, etc.\n",
    "\n",
    "The dataset has very few data points, only 506 in total, split between 404 training samples and 102 test samples, and each \"feature\" in the input data (e.g. the crime rate is a feature) has a different scale. For instance some values are proportions, which take a values between 0 and 1, others take values between 1 and 12, others between 0 and 100."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.datasets import boston_housing\n",
    "(train_data, train_targets), (test_data, test_targets) =  boston_housing.load_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((404, 13),\n",
       " (102, 13),\n",
       " array([15.2, 42.3, 50. , 21.1, 17.7, 18.5, 11.3, 15.6, 15.6, 14.4]))"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.shape, test_data.shape, train_targets[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The data comprises 13 features as follows:\n",
    "\n",
    "- Per capita crime rate.\n",
    "\n",
    "- Proportion of residential land zoned for lots over 25,000 square feet.\n",
    "\n",
    "- Proportion of non-retail business acres per town.\n",
    "\n",
    "- Charles River dummy variable (= 1 if tract bounds river; 0 otherwise).\n",
    "\n",
    "- Nitric oxides concentration (parts per 10 million).\n",
    "\n",
    "- Average number of rooms per dwelling.\n",
    "\n",
    "- Proportion of owner-occupied units built prior to 1940.\n",
    "\n",
    "- Weighted distances to five Boston employment centres.\n",
    "\n",
    "- Index of accessibility to radial highways.\n",
    "\n",
    "- Full-value property-tax rate per $10,000.\n",
    "\n",
    "- Pupil-teacher ratio by town.\n",
    "\n",
    "- $1000 \\times (B_k - 0.63)^2$ where $B_k$ is the proportion of Black people by town.\n",
    "\n",
    "- \\% lower status of the population.\n",
    "\n",
    "The targets are the median values of owner-occupied homes, in thousands of dollars. The prices are typically between <span>&dollar;</span>10,000 and <span>&dollar;</span>50,000."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Preparing the data\n",
    "\n",
    "It would be problematic to feed into a neural network values that all take wildly different ranges. The network might be able to automatically adapt to such heterogeneous data, but it would definitely make learning more difficult. A widespread best practice to deal with such data is to do feature-wise normalization: for each feature in the input data (a column in the input data matrix), we will subtract the mean of the feature and divide by the standard deviation, so that the feature will be centered around 0 and will have a unit standard deviation. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "mean = train_data.mean(axis=0)\n",
    "train_data -= mean\n",
    "std = train_data.std(axis=0)\n",
    "train_data /= std\n",
    "\n",
    "test_data -= mean\n",
    "test_data /= std"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that the quantities that **we use for normalizing the test data have been computed using the training data**. We should never use in our workflow any quantity computed on the test data, even for something as simple as data normalization."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Building the network\n",
    "\n",
    "When little training data is available, it’s preferable to use a small network with few hidden layers (typically only one or two), in order to avoid severe overfitting."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def build_model():\n",
    "    model = models.Sequential()\n",
    "    model.add(layers.Dense(64, activation='relu',\n",
    "                           input_shape=(train_data.shape[1],)))\n",
    "    model.add(layers.Dense(64, activation='relu'))\n",
    "    model.add(layers.Dense(1))\n",
    "    model.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])\n",
    "    return model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The network ends with a single unit, and no activation (i.e. it will be linear layer). This is a typical setup for scalar regression (i.e. regression where we are trying to predict a single continuous value).\n",
    "\n",
    "We compile the network with the mse loss function -- Mean Squared Error and monitor a new metric during training: mae -- Mean Absolute Error. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### K-fold Validation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To evaluate our network while we keep adjusting its parameters (such as the number of epochs used for training), we could simply split the data into a training set and a validation set. However, because we have so few data points, the validation set would end up being very small (e.g. about 100 examples). A consequence is that our validation scores may change a lot depending on which data points we choose to use for validation and which we choose for training, i.e. the validation scores may have a high variance with regard to the validation split. This would prevent us from reliably evaluating our model.\n",
    "\n",
    "The best practice in such situations is to use K-fold cross-validation. It consists of splitting the available data into K partitions (typically K=4 or 5), then instantiating K identical models, and training each one on K-1 partitions while evaluating on the remaining partition. The validation score for the model used would then be the average of the K validation scores obtained.\n",
    "\n",
    "<img src=\"https://github.com/ming-zhao/Optimization-and-Learning/raw/master/figures/k-fold_valid.png\" width=\"500\">\n",
    "\n",
    "Let's train the network for 300 epochs. To keep a record of how well the model did at each epoch, we save the per-epoch validation score log."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def k_fold_validate():\n",
    "    k = 4\n",
    "    num_val_samples = len(train_data) // k\n",
    "    num_epochs = 300\n",
    "    all_scores = []\n",
    "    all_mae_histories = []\n",
    "    for i in range(k):\n",
    "        print('processing fold #', i)\n",
    "        # Prepare the validation data: data from partition # k\n",
    "        val_data = train_data[i * num_val_samples: (i + 1) * num_val_samples]\n",
    "        val_targets = train_targets[i * num_val_samples: (i + 1) * num_val_samples]\n",
    "\n",
    "        # Prepare the training data: data from all other partitions\n",
    "        partial_train_data = np.concatenate(\n",
    "            [train_data[:i * num_val_samples],\n",
    "             train_data[(i + 1) * num_val_samples:]],\n",
    "            axis=0)\n",
    "        partial_train_targets = np.concatenate(\n",
    "            [train_targets[:i * num_val_samples],\n",
    "             train_targets[(i + 1) * num_val_samples:]],\n",
    "            axis=0)\n",
    "\n",
    "        model = build_model()\n",
    "        # Train the model (in silent mode, verbose=0)\n",
    "        history = model.fit(partial_train_data, partial_train_targets,\n",
    "                            validation_data=(val_data, val_targets),\n",
    "                            epochs=num_epochs, batch_size=1, verbose=0)\n",
    "        # Evaluate the model on the validation data\n",
    "        val_mse, val_mae = model.evaluate(val_data, val_targets, verbose=0)\n",
    "        all_scores.append(val_mae)\n",
    "\n",
    "        mae_history = history.history['val_mean_absolute_error']\n",
    "        all_mae_histories.append(mae_history)\n",
    "\n",
    "    df = pd.DataFrame(data=np.array(all_mae_histories).T, columns=['mae0', 'mae1', 'mae2', 'mae3'])\n",
    "    df.to_csv(base_dir+'\\\\house.csv', header=True, index=False)\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0    2.410330\n",
       " 1    3.169268\n",
       " 2    2.872851\n",
       " 3    2.974952\n",
       " Name: score, dtype: float64, 2.856850517268228)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(base_dir+'\\\\house_scores.csv')\n",
    "df.score, np.mean(df.score)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you can notice, the different runs show rather different validation scores. Their average is a much more reliable metric than any single of these scores."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can compute the average of the per-epoch MAE scores for all folds. We also plot an exponential moving average of the average MAE curve to better demonstrate the overfitting."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(base_dir+'\\\\house.csv')\n",
    "average_mae_history = np.mean(df, axis=1)\n",
    "# exponential smoothing a curve\n",
    "def smooth_curve(points, factor=0.9):\n",
    "    smoothed_points = []\n",
    "    for point in points:\n",
    "        if smoothed_points:\n",
    "            previous = smoothed_points[-1]\n",
    "            smoothed_points.append(previous * factor + point * (1 - factor))\n",
    "        else:\n",
    "            smoothed_points.append(point)\n",
    "    return smoothed_points\n",
    "smooth_mae_history = smooth_curve(average_mae_history)\n",
    "\n",
    "fig = plt.figure(figsize=(10,5))\n",
    "plt.plot(range(1, len(average_mae_history) + 1), average_mae_history, label='MAE')\n",
    "plt.plot(range(1, len(smooth_mae_history) + 1), smooth_mae_history, label='Smoothed MAE')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Validation MAE')\n",
    "plt.ylim(2.2, 3.2)\n",
    "plt.title('Average MAE')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It seems that validation MAE stops improving significantly after 50-60 epochs. Past that point, we start overfitting."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "102/102 [==============================] - 0s 3ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "2.7497070256401512"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = build_model()\n",
    "# Train it on the entirety of the data.\n",
    "model.fit(train_data, train_targets, epochs=50, batch_size=16, verbose=0)\n",
    "test_mse_score, test_mae_score = model.evaluate(test_data, test_targets)\n",
    "K.clear_session()\n",
    "del model\n",
    "test_mae_score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our predictions on the testing data are still off by more than <span>&dollar;</span>2,700. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Classification"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We consider movie-review binary classification problem with positive or negative reviews based on IMDB dataset and a multi-class classification problem on Reuters dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### IMDB dataset\n",
    "\n",
    "IMDB dataset is a set of 50,000 highly-polarized reviews from the Internet Movie Database. They are split into 25,000 reviews for training and 25,000 reviews for testing, each set consisting in 50% negative and 50% positive reviews.\n",
    "\n",
    "The argument `num_words=10000` restricts the data to the 10,000 most frequently occurring words found in the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Revise np.load because of keras error msg \"Object arrays cannot be loaded when allow_pickle=False\"\n",
    "np_load_old = np.load\n",
    "# modify the default parameters of np.load\n",
    "np.load = lambda *a,**k: np_load_old(*a, allow_pickle=True, **k)\n",
    "\n",
    "# call load_data with allow_pickle implicitly set to true\n",
    "from keras.datasets import imdb\n",
    "(train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=10000)\n",
    "\n",
    "# restore np.load for future normal usage\n",
    "np.load = np_load_old\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Training data is stored as numberic array. For example,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 14, 22, 16, 43, 530, 973, 1622, 1385, 65]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data[0][:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Therefore, we need a dictionary mapping words to an interger index:\n",
    "```python\n",
    "word_index = imdb.get_word_index()\n",
    "```\n",
    "Then we reverse it to have a dictionary mapping integer indices to words\n",
    "```python\n",
    "reverse_word_index = dict([(value, key) for (key, value) in word_index.items()]) \n",
    "```\n",
    "At last, we can decode the review (note that our indices were offset by 3 because 0, 1 and 2 are reserved indices for \"padding\", \"start of sequence\", and \"unknown\").\n",
    "\n",
    "For example, we can deconde the first 10 words as follows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Deconde review train_data[0][:10]]:\n",
      " ? this film was just brilliant casting location scenery story\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'Example of dictionary:\\n'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "{11: 'this',\n",
       " 12: 'that',\n",
       " 13: 'was',\n",
       " 14: 'as',\n",
       " 15: 'for',\n",
       " 16: 'with',\n",
       " 17: 'movie',\n",
       " 18: 'but',\n",
       " 19: 'film',\n",
       " 20: 'on'}"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "word_index = imdb.get_word_index()\n",
    "reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])\n",
    "print(\"Deconde review train_data[0][:10]]:\\n\",\n",
    "      ' '.join([reverse_word_index.get(i - 3, '?') for i in train_data[0][:10]]))\n",
    "\n",
    "display('Example of dictionary:\\n',dict(sorted(reverse_word_index.items())[10:20]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1d652b788c33478d93221ef114501dbd",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(IntSlider(value=10, description='Index of Review:', max=30, style=SliderStyle(descriptio…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def show_review(index):\n",
    "    decoded_review = ' '.join([reverse_word_index.get(i - 3, '?') for i in train_data[index]])\n",
    "    print('Review:\\n', decoded_review)\n",
    "    print('Number of words:', len(decoded_review.split()))\n",
    "    print('Indices for all ?s:', [train_data[index][i] for i, w in enumerate(decoded_review.split()) if w == '?'])  \n",
    "\n",
    "style = {'description_width': 'initial'}\n",
    "interact(show_review, index=widgets.IntSlider(min=0,max=30,step=1,value=10,description='Index of Review:',style=style));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Preparing the data\n",
    "We cannot feed lists of integers into a neural network. We have to turn our lists into tensors. There are two ways we could do that:\n",
    "\n",
    "- We could pad our lists so that they all have the same length, and turn them into an integer tensor of shape (samples, word_indices), then use as first layer in our network a layer capable of handling such integer tensors (the Embedding layer, which we will cover later).\n",
    "\n",
    "</br>\n",
    "\n",
    "- We could one-hot-encode our lists to turn them into vectors of 0s and 1s. Concretely, this would mean for instance turning the sequence  [3, 5] into a 10,000-dimensional vector that would be all-zeros except for indices 3 and 5, which would be ones. Then we could use as first layer in our network a Dense layer, capable of handling floating point vector data.\n",
    "\n",
    "We will go with the latter solution. Let's vectorize our data manually for maximum clarity. An example for vectorize array\n",
    "\n",
    "\\begin{array}{rll}\n",
    "[[1 & 2 & 5], \\\\\n",
    "[3 & 5]]\n",
    "\\end{array}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 1., 1., 0., 0., 1., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 1., 0., 1., 0., 0., 0., 0.]])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def vectorize_sequences(sequences, dimension=10000):\n",
    "    # Create an all-zero matrix of shape (len(sequences), dimension)\n",
    "    results = np.zeros((len(sequences), dimension))\n",
    "    for i, sequence in enumerate(sequences):\n",
    "        results[i, sequence] = 1.  # set specific indices of results[i] to 1s\n",
    "    return results\n",
    "\n",
    "vectorize_sequences([[1,2,5],[3,5]], dimension=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train = vectorize_sequences(train_data)\n",
    "x_test = vectorize_sequences(test_data)\n",
    "y_train = np.asarray(train_labels).astype('float32')\n",
    "y_test = np.asarray(test_labels).astype('float32')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So far, Our input data is simply vectors with values 0 or 1, and our labels are scalars (1s and 0s). The easiest setup you will ever encounter. Fully connected (Dense) layers with `relu` activation typically performs well on such a dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Building the network"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our network architecture includes:\n",
    "\n",
    "- Two intermediate layers with 16 hidden units each, and \n",
    "\n",
    "</br>\n",
    "\n",
    "- a third layer which will output the scalar prediction regarding the sentiment of the current review. \n",
    "\n",
    "The intermediate layers will use `relu` as their \"activation function\", and the final layer will use a `sigmoid` activation so as to output a probability (a score between 0 and 1, indicating how likely the sample is to have the target \"1\", i.e. how likely the review is to be positive).\n",
    "\n",
    "<img src=\"https://github.com/ming-zhao/Optimization-and-Learning/raw/master/figures/relu_sigmoid.png\" width=\"500\">\n",
    "\n",
    "**Hidden unit**  is a single dimension in the representation space of the layer. Each Dense layer with a relu activation implements the following chain of tensor operations:\n",
    "\n",
    "\\begin{align*}\n",
    "\\text{output = relu (dot($W$, input) + $b$)}\n",
    "\\end{align*}\n",
    "\n",
    "Having 16 hidden units means that the weight matrix W will have shape (input_dimension, 16), i.e. the dot product with W will project the input data onto a 16-dimensional representation space. \n",
    "\n",
    "Intuitively, the dimensionality of your representation space is **how much freedom you are allowing the network to have when learning internal representations**. \n",
    "\n",
    "Having more hidden units (a higher-dimensional representation space) allows your network to learn more complex representations, but it\n",
    "\n",
    "- makes your network more computationally expensive and \n",
    "\n",
    "- may lead to overfitting"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr>\n",
    "\n",
    "The rmsprop optimizer is generally a good enough choice of optimizer whatever your problem.\n",
    "\n",
    "Since we are facing a binary classification problem, we end our network with a single-unit layer with a sigmoid activation. It is better to use the binary_crossentropy loss, although you have other viable choices, for instance, you could use loss function: mean_squared_error. But crossentropy is usually the best choice when you are dealing with models that output probabilities.\n",
    "\n",
    "If we want to configure the parameters of optimizer, or pass a custom loss function or metric function. This can be done by passing an optimizer class instance as the optimizer argument or passing function objects as the loss or metrics arguments:\n",
    "\n",
    "```python\n",
    "from keras import optimizers\n",
    "from keras import losses\n",
    "from keras import metrics\n",
    "\n",
    "model.compile(optimizer=optimizers.RMSprop(lr=0.001),\n",
    "              loss=losses.binary_crossentropy,\n",
    "              metrics=[metrics.binary_accuracy])\n",
    "```\n",
    "\n",
    "\n",
    "\n",
    "In order to monitor during training the accuracy of the model on data that it has never seen before, we will create a validation set by setting apart 10,000 samples from the original training data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def train_imdb_1():\n",
    "    model = models.Sequential()\n",
    "    model.add(layers.Dense(16, activation='relu', input_shape=(10000,)))\n",
    "    model.add(layers.Dense(16, activation='relu'))\n",
    "    model.add(layers.Dense(1, activation='sigmoid'))\n",
    "    model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "    x_val = x_train[:10000]\n",
    "    partial_x_train = x_train[10000:]\n",
    "    y_val = y_train[:10000]\n",
    "    partial_y_train = y_train[10000:]\n",
    "\n",
    "    history = model.fit(partial_x_train, partial_y_train, epochs=20, batch_size=512,\n",
    "                        validation_data=(x_val, y_val), verbose=0);\n",
    "    model.save(base_dir+\"\\\\imdb_1.h5\")\n",
    "    df = pd.DataFrame.from_dict(data=history.history, orient='columns')\n",
    "    df.to_csv(base_dir+'\\\\history_imdb.csv', header=True, index=False)\n",
    "    K.clear_session()\n",
    "    del model\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25000/25000 [==============================] - 4s 150us/step\n",
      "model achieves an accuracy of 85.36% for testing data\n"
     ]
    }
   ],
   "source": [
    "model = models.load_model(base_dir+\"\\\\imdb_1.h5\")\n",
    "results = model.evaluate(x_test, y_test)\n",
    "print('model achieves an accuracy of {}% for testing data'.format(round(results[1]*100,2)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Validating the Approach"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`model.fit()` returns a `history` object. This object has a member history, which is a dictionary containing data about everything that happened during training. The dictionary has 4 keys \"val_loss\", \"val_acc\", \"loss\", \"acc\" which are loss/accuracy percentages for validation and training datasets. We plot the training and validation loss, as well as the training and validation accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(base_dir+'\\\\history_imdb.csv')\n",
    "history = df.to_dict()\n",
    "\n",
    "acc = list(history['acc'].values())\n",
    "val_acc = list(history['val_acc'].values())\n",
    "loss = list(history['loss'].values())\n",
    "val_loss = list(history['val_loss'].values())\n",
    "epochs = range(len(acc))\n",
    "\n",
    "fig = plt.figure(figsize=(18,5))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
    "plt.plot(epochs, val_loss, 'r', label='Validation loss')\n",
    "plt.title('Training and validation loss')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(epochs, acc, 'bo', label='Training acc')\n",
    "plt.plot(epochs, val_acc, 'r', label='Validation acc')\n",
    "plt.title('Training and validation accuracy')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The training loss decreases with every epoch and the training accuracy increases with every epoch. That's what you would expect when running gradient descent optimization -- the quantity you are trying to minimize should get lower with every iteration. \n",
    "\n",
    "However, this isn't the case for the validation loss and accuracy: they seem to peak at the fourth epoch. \n",
    "\n",
    "Overfitting: a model that performs better on the training data isn't necessarily a model that will do better on data it has never seen before. We ended up learning representations that are specific to the training data and do not generalize to data outside of the training set.\n",
    "\n",
    "In this case, to prevent overfitting, we could simply stop training after 4 epochs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def train_imdb_2():\n",
    "    model = models.Sequential()\n",
    "    model.add(layers.Dense(16, activation='relu', input_shape=(10000,)))\n",
    "    model.add(layers.Dense(16, activation='relu'))\n",
    "    model.add(layers.Dense(1, activation='sigmoid'))\n",
    "    model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])\n",
    "    model.fit(x_train, y_train, epochs=4, batch_size=512, verbose=0)\n",
    "    model.save(base_dir+\"\\\\imdb_2.h5\")\n",
    "    K.clear_session()\n",
    "    del model        \n",
    "toggle()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25000/25000 [==============================] - 4s 143us/step\n",
      "\n",
      " model achieves an accuracy of 88.32% for testing data\n"
     ]
    }
   ],
   "source": [
    "model = models.load_model(base_dir+\"\\\\imdb_2.h5\")\n",
    "results = model.evaluate(x_test, y_test)\n",
    "print('\\n model achieves an accuracy of {}% for testing data'.format(round(results[1]*100,2)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Prediction\n",
    "\n",
    "After having trained a network, we can generate the likelihood of reviews being positive by using the predict method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.19963935],\n",
       "       [0.9995559 ],\n",
       "       [0.8614843 ],\n",
       "       ...,\n",
       "       [0.09901541],\n",
       "       [0.07926401],\n",
       "       [0.50504327]], dtype=float32)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.predict(x_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are some Further experiments can be tried:\n",
    "\n",
    "- We were using 2 hidden layers. Try to use 1 or 3 hidden layers and see how it affects validation and test accuracy.\n",
    "\n",
    "- Try to use layers with more hidden units or less hidden units: 32 units, 64 units...\n",
    "\n",
    "- Try to use the mse loss function instead of binary_crossentropy.\n",
    "\n",
    "- Try to use the tanh activation (an activation that was popular in the early days of neural networks) instead of relu."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Reuters Dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For IMDB dataset, we classify vector inputs into two mutually exclusive classes using a densely-connected neural network. In this section, we will build a network to classify Reuters newswires into 46 different mutually-exclusive topics. Since we have many classes, this problem is an instance of multi-class classification.\n",
    "\n",
    "Reuters dataset, a set of short newswires and their topics, published by Reuters in 1986. It's a very simple, widely used toy dataset for text classification. There are 46 different topics; some topics are more represented than others, but each topic has at least 10 examples in the training set.\n",
    "\n",
    "We have 8,982 training examples and 2,246 test examples. As with the IMDB reviews, each example is a list of integers (word indices)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np_load_old = np.load\n",
    "np.load = lambda *a,**k: np_load_old(*a, allow_pickle=True, **k)\n",
    "from keras.datasets import reuters\n",
    "from keras.utils.np_utils import to_categorical\n",
    "(train_data, train_labels), (test_data, test_labels) = reuters.load_data(num_words=10000)\n",
    "np.load = np_load_old\n",
    "\n",
    "x_train = vectorize_sequences(train_data)\n",
    "x_test = vectorize_sequences(test_data)\n",
    "y_train = to_categorical(train_labels)\n",
    "y_test = to_categorical(test_labels)\n",
    "\n",
    "# we set apart 1000 samples in the training data as validation set\n",
    "partial_x_train = x_train[1000:]\n",
    "x_val = x_train[:1000]\n",
    "partial_y_train = y_train[1000:]\n",
    "y_val = y_train[:1000]\n",
    "\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Similar to the IMDB dataset, we prepare the data by vectorizing the data with the exact same code, building the network and validating the approach.\n",
    "\n",
    "However, there is a new constraint that changes our network architecture: the number of output classes has gone from 2 to 46, i.e. the dimensionality of the output space is much larger.\n",
    "\n",
    "- In a stack of Dense layers, each layer can only access information present in the output of the previous layer. If one layer drops some information relevant to the classification problem, this information can never be recovered by later layers. \n",
    "\n",
    "    Therefore, we cannot use 16-dimensional intermediate layers as for IMDB dataset, because a 16-dimensional space may be too limited to learn to separate 46 different classes. Such small layers may act as information bottlenecks, permanently dropping relevant information. For this reason we will use larger layers with 64 units.\n",
    "\n",
    "    We can see what happens when we introduce an information bottleneck by having intermediate layers significantly less than 46-dimensional, e.g. 4-dimensional by changing the code\n",
    "```python\n",
    "model.add(layers.Dense(64, activation='relu'))\n",
    "```\n",
    "\n",
    "    to\n",
    "```python\n",
    "model.add(layers.Dense(4, activation='relu'))\n",
    "```\n",
    "\n",
    "- The last layer uses a softmax activation. It means that the network will output a probability distribution over the 46 different output classes, i.e. for every input sample, the network will produce a 46-dimensional output vector where `output[i]` is the probability that the sample belongs to class i. The 46 scores will sum to 1.\n",
    "\n",
    "</br>\n",
    "\n",
    "- The best loss function to use in this case is categorical_crossentropy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def train_reuters_1():\n",
    "    model = models.Sequential()\n",
    "    model.add(layers.Dense(64, activation='relu', input_shape=(10000,)))\n",
    "    model.add(layers.Dense(64, activation='relu'))\n",
    "    model.add(layers.Dense(46, activation='softmax'))\n",
    "    model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "    history = model.fit(partial_x_train, partial_y_train, epochs=20, batch_size=512,\n",
    "                        validation_data=(x_val, y_val), verbose=0)\n",
    "    model.save(base_dir+\"\\\\reuters_1.h5\")\n",
    "    df = pd.DataFrame.from_dict(data=history.history, orient='columns')\n",
    "    df.to_csv(base_dir+'\\\\history_reuters1.csv', header=True, index=False)\n",
    "    K.clear_session()\n",
    "    del model\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2246/2246 [==============================] - 0s 197us/step\n",
      "model achieves an accuracy of 77.83% for testing data\n"
     ]
    }
   ],
   "source": [
    "model = models.load_model(base_dir+\"\\\\reuters_1.h5\")\n",
    "results = model.evaluate(x_test, y_test)\n",
    "print('model achieves an accuracy of {}% for testing data'.format(round(results[1]*100,2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(base_dir+'\\\\history_reuters1.csv')\n",
    "history = df.to_dict()\n",
    "\n",
    "acc = list(history['acc'].values())\n",
    "val_acc = list(history['val_acc'].values())\n",
    "loss = list(history['loss'].values())\n",
    "val_loss = list(history['val_loss'].values())\n",
    "epochs = range(1, len(acc)+1)\n",
    "\n",
    "fig = plt.figure(figsize=(18,5))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
    "plt.plot(epochs, val_loss, 'r', label='Validation loss')\n",
    "plt.title('Training and validation loss')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(epochs, acc, 'bo', label='Training acc')\n",
    "plt.plot(epochs, val_acc, 'r', label='Validation acc')\n",
    "plt.title('Training and validation accuracy')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It seems that the network starts overfitting after 9 epochs. Let's train a new network from scratch for 6 epochs, then evaluate it on the test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def train_reuters_2():\n",
    "    model = models.Sequential()\n",
    "    model.add(layers.Dense(64, activation='relu', input_shape=(10000,)))\n",
    "    model.add(layers.Dense(64, activation='relu'))\n",
    "    model.add(layers.Dense(46, activation='softmax'))\n",
    "    model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "    history = model.fit(partial_x_train, partial_y_train, epochs=9, batch_size=512,\n",
    "                        validation_data=(x_val, y_val), verbose=0)\n",
    "    model.save(base_dir+\"\\\\reuters_2.h5\")\n",
    "    K.clear_session()\n",
    "    del model\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2246/2246 [==============================] - 0s 188us/step\n",
      "model achieves an accuracy of 78.63% for testing data\n"
     ]
    }
   ],
   "source": [
    "model = models.load_model(base_dir+\"\\\\reuters_2.h5\")\n",
    "results = model.evaluate(x_test, y_test)\n",
    "print('model achieves an accuracy of {}% for testing data'.format(round(results[1]*100,2)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Prediction: `model.predict()` returns a probability distribution over all 46 topics. We need to use `np.argmax(predictions,axis=1)` to find out predicted class, which is the class with the highest probability."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2246, 46)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "array([ 3, 10,  1, ...,  3,  3,  1], dtype=int64)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions = model.predict(x_test)\n",
    "display(predictions.shape)\n",
    "predictions.shape\n",
    "predictions = np.argmax(predictions,axis=1)\n",
    "predictions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Regularization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The fundamental issue in machine learning is the tension between optimization and generalization. \n",
    "\n",
    "**\"Optimization\"** refers to the process of adjusting a model to get the best performance possible on the training data (the \"learning\" in \"machine learning\"), while **\"generalization\"** refers to how well the trained model would perform on data it has never seen before. \n",
    "\n",
    "The goal of the game is to get good generalization, of course, but we do not control generalization; we can only adjust the model based on its training data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Size of the Network\n",
    "\n",
    "The number of hidden units in each layer is a free parameter that can be adjusted to have the best predictive performance. Deep learning models tend to be good at fitting to the training data, but the real challenge is generalization, not fitting.\n",
    "\n",
    "In deep learning, the number of learnable parameters in a model is often referred to as the model's \"capacity\". There is a compromise to be found between \"too much capacity\" and \"not enough capacity\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def create_data(n=10):\n",
    "    np.random.seed(11111113)\n",
    "    x = np.linspace(0, 1, n)[:, None]\n",
    "    return x, np.sin(2 * np.pi * x) + np.random.normal(scale=0.25, size=(10, 1))\n",
    "\n",
    "def regularization():\n",
    "    x_train, y_train = create_data()\n",
    "    for i, m in enumerate([1, 3, 30]):\n",
    "        model = models.Sequential()\n",
    "        model.add(layers.Dense(m, activation='tanh', input_shape=(1,)))\n",
    "        model.add(layers.Dense(1))\n",
    "        model.compile(optimizer='Adam',loss='mean_squared_error', metrics=['mae'])\n",
    "        model.fit(x_train, y_train, epochs=10000, batch_size=1, verbose=0);\n",
    "        model.save(base_dir+\"\\\\regularization_{}.h5\".format(m))\n",
    "        K.clear_session()\n",
    "        del model\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x360 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x_train, y_train = create_data()\n",
    "x = np.linspace(0, 1, 100)[:, None]\n",
    "plt.figure(figsize=(20, 5))\n",
    "for i, m in enumerate([1,3,30]):\n",
    "    plt.subplot(1, 3, i + 1)\n",
    "    model = models.load_model(base_dir+\"\\\\regularization_{}.h5\".format(m))\n",
    "    y = model.predict(x)\n",
    "    plt.scatter(x_train, y_train, marker=\"x\", color=\"r\")\n",
    "    plt.plot(x, np.sin(2 * np.pi * x), color='y')\n",
    "    plt.plot(x, y, color=\"k\")\n",
    "    plt.title(\"# hidden units={}\".format(m))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We consider the movie-review classification problem."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def network_size():\n",
    "    np_load_old = np.load\n",
    "    np.load = lambda *a,**k: np_load_old(*a, allow_pickle=True, **k)\n",
    "    (train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=10000)\n",
    "    np.load = np_load_old\n",
    "    x_train = vectorize_sequences(train_data)\n",
    "    x_test = vectorize_sequences(test_data)\n",
    "    y_train = np.asarray(train_labels).astype('float32')\n",
    "    y_test = np.asarray(test_labels).astype('float32')\n",
    "\n",
    "    original_model = models.Sequential()\n",
    "    original_model.add(layers.Dense(16, activation='relu', input_shape=(10000,)))\n",
    "    original_model.add(layers.Dense(16, activation='relu'))\n",
    "    original_model.add(layers.Dense(1, activation='sigmoid'))\n",
    "    original_model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n",
    "    original_hist = original_model.fit(x_train, y_train, epochs=20, batch_size=512,\n",
    "                                       validation_data=(x_test, y_test), verbose=0)\n",
    "    df = pd.DataFrame.from_dict(data=original_hist.history, orient='columns')\n",
    "    df.to_csv(base_dir+'\\\\history_imdb_orig.csv', header=True, index=False)\n",
    "    K.clear_session()\n",
    "    del original_model\n",
    "\n",
    "    smaller_model = models.Sequential()\n",
    "    smaller_model.add(layers.Dense(4, activation='relu', input_shape=(10000,)))\n",
    "    smaller_model.add(layers.Dense(4, activation='relu'))\n",
    "    smaller_model.add(layers.Dense(1, activation='sigmoid'))\n",
    "    smaller_model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n",
    "    smaller_model_hist = smaller_model.fit(x_train, y_train, epochs=20, batch_size=512,\n",
    "                                           validation_data=(x_test, y_test), verbose=0)\n",
    "    df = pd.DataFrame.from_dict(data=smaller_model_hist.history, orient='columns')\n",
    "    df.to_csv(base_dir+'\\\\history_imdb_small.csv', header=True, index=False)\n",
    "    K.clear_session()\n",
    "    del smaller_model\n",
    "\n",
    "    bigger_model = models.Sequential()\n",
    "    bigger_model.add(layers.Dense(512, activation='relu', input_shape=(10000,)))\n",
    "    bigger_model.add(layers.Dense(512, activation='relu'))\n",
    "    bigger_model.add(layers.Dense(1, activation='sigmoid'))\n",
    "    bigger_model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n",
    "    bigger_model_hist = bigger_model.fit(x_train, y_train, epochs=20, batch_size=512,\n",
    "                                         validation_data=(x_test, y_test), verbose=0)\n",
    "    df = pd.DataFrame.from_dict(data=bigger_model_hist.history, orient='columns')\n",
    "    df.to_csv(base_dir+'\\\\history_imdb_big.csv', header=True, index=False) \n",
    "    K.clear_session()\n",
    "    del bigger_model\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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dbZt2zY7/fTT7frrrzczs0svvdQ+/vhjMzPLycmxE044wczMRowYYW3atLG8Yv6PzJgxw+rWrWurV6+2rVu3Wv369e3vf/+7mZk99thjNmzYMDMz69Onj02aNMnMzJ555hnr16+fmZn17dvXJk+ebGZmY8aM2T0mev/99+3qq6+2goIC27lzp51zzjk2c+ZMM9szbjoQGo+IHLwfp/xo/2v4P5vhZtj/Gv7voH+WSXgraTwSdXPjUlMhL6/osbw8fzwlpXzXrF27NvPmzePjjz9mxowZXHzxxTz44IMMHDgQgHPPPReAli1bsmnTJurUqUOdOnWoWbMmv/76K4ceeih33HEHs2bNIiYmhlWrVpGbm8vvfve7Yp/vgw8+4Kuvvto9fXL9+vV888031KhRgw4dOtCoUaNiv65GjRr07t17d5bY2FiqV69Oy5YtWb58OQCffPIJQ4cOBeCEE06gYcOGLF26lFmzZvGXv/wFgOTkZJKTkwH49NNPWbx4MaeddhoA27Zto1OnTuX7gxQRqQp+/hnOOw8+/hhGjoSbbwbngk4lEWZ/DdoOZl3z3ssuMjMzufzyy1m0aFGRcz755BOGDRsGQIsWLXa/pn/++ed06dKFI488EoABAwawdOlSAKZPn87ixYt3X2PDhg1s3LgR8OOcWrVqFZunffv2HHvssQA0btyYnj17An4cUji7MjMzk9deew2AP/3pT/ztb38DYPbs2bz66qu7j996662AHwd98MEHnHzyyYCfQfrNN9/QuXPncvyJiUhF0PaVUhZRV3zYNZOvzMfLqlq1anTt2pWuXbvSsmVLJk+evLv4ULgcIyYmZvfnhfd37NhBeno6a9euZd68eVSvXp3ExES2bt1a4nOZGU888QS9evUqcjwjI4ND97PVW/Xq1XG7BtB7ZynMUXjtkrhiBt9mRo8ePZg6dWqJXyciEjZycuCss+Dbb2HqVLjkkqATSYQKVYO2vXXq1ImffvqJtWvXFjle0mv9/sYABQUFZGZmFltk2N/YY99xT3Fjj33tPd4oaexx++23c80115T4vCIiUvVEXc+HhIQDO14WWVlZfPPNN7vvz58/n4YNG5b569evX88xxxxD9erVmTFjBjk5Ofs9v1evXowbN47t27cDsHTpUjZv3ly+8Pvo3Lkz6buaYCxdupQVK1bQrFmzIscXLVrEV199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UosRI6BWraCTiYiIhERsQuwBHRcJF6EsPswBmjjnGjnnauALDNP2Pck5VxfoArwZwiwiIhJOVq6Eiy+GP/zBz3z4z3/8MoukpKCTiYiIhFRSWhIxcUV/TYuJiyEpTa+BEt5CVnwwsx34Hg7vA0uAl8zsa+fctc65a/c69XzgAzPbHKosIiISJrZtg3/+0y+xmDYN7rnHL7Ho0yfoZCIiIpUiPiWeZhOaEdswFhzENoyl2YRm6vcgYS+UDScxs3fwXaT3PjZ+n/uTgEmhzCEiImHgv//1u1j83//Buef6XSwaNQo6lYiISKWLT4lXsUEiTiiXXYiIiJRu5Uq46KI9SyzeegvefFOFBxEREZEIouKDiIgEY9s2eOghv8TiP//Zs8TinHOCTiYiIiIiFSykyy5ERESKNX26X2KRlQX9+sGoUZrpICIiIhLBNPNBREQqT1YWDBgAPXrAjh3w9tvwxhsqPIiIiIhEOBUfREQk9L74whcdmjf3BYd774VFi+Dss4NOJiIiIiKVQMsuREQkNMzg44/h/vvh/ffhsMPg9tth2DA45pig04mIiIhIJVLxQUREKpYZvPuuLzrMng316sEDD8CQIVC3btDpRERERCQAKj6IiEjF2LkTXnnFFxoWLICEBHjiCbjySoiLCzqdiIiIiARIxQcRETk4+fnw/PN+28xly/zWmZMmwWWXQfXqQacTERERkSpAxQcRESmfzZthwgR45BFYtQratoVXX4XzzoMY9TMWERERkT1UfBARkQPz888wZgw8/jisWwddusCzz/rtM50LOp2IiIiIVEEqPoiISNn88AOMGgXjxsGmTdCnj9+94tRTg04mIiIiIlWcig8iIrJ/2dkwciRMnAjbt8PFF8Ntt0FyctDJRERERCRMqPggIiLF+/prv3PFiy9CtWpwxRXwt7/B8ccHnUxEREREwoyKDyIi8lsffwxnngmxsTBsGAwfDscdF3QqEREREQlTKj6IiEhRv/4Kf/wjNGwImZlQr17QiUREREQkzKn4ICIie5jBNdfA6tUwe7YKDyIiIiJSIVR8EBGRPSZPhpdegvvvhw4dgk4jIiIiIhEiJugAIiJSRSxbBjfcAF27+saSIiIisl+56blkJmaSEZNBZmImuem5QUcSqbI080FERPwWmpddBjVqwPPP+90tREREpES56blkDc6iIK8AgPyc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\n",
      "text/plain": [
       "<Figure size 1296x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(base_dir+'\\\\history_imdb_orig.csv')\n",
    "history = df.to_dict()\n",
    "original_val_loss = list(history['val_loss'].values())\n",
    "df = pd.read_csv(base_dir+'\\\\history_imdb_small.csv')\n",
    "history = df.to_dict()\n",
    "smaller_model_val_loss = list(history['val_loss'].values())\n",
    "df = pd.read_csv(base_dir+'\\\\history_imdb_big.csv')\n",
    "history = df.to_dict()\n",
    "bigger_model_val_loss = list(history['val_loss'].values())\n",
    "epochs = range(1, len(original_val_loss)+1)\n",
    "\n",
    "fig = plt.figure(figsize=(18,5))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(epochs, original_val_loss, 'r', label='Original model')\n",
    "plt.plot(epochs, smaller_model_val_loss, 'bo', label='Smaller model')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Validation loss')\n",
    "plt.legend()\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(epochs, original_val_loss, 'r', label='Original model')\n",
    "plt.plot(epochs, bigger_model_val_loss, 'mo', label='Bigger model')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Validation loss')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Weight Regularization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A common way to mitigate overfitting is to put constraints on the complexity of a network by forcing its weights to only take small values. It is done by adding to the loss function of the network a cost associated with having large weights. This cost comes in two flavors:\n",
    "\n",
    "- L1 regularization, where the cost added is proportional to the absolute value of the weights coefficients.\n",
    "\n",
    "</br>\n",
    "\n",
    "- L2 regularization, where the cost added is proportional to the square of the value of the weights coefficients. L2 regularization is also called weight decay in the context of neural networks.\n",
    "\n",
    "We have shown that early stopping is an alternative to regularization, which can control the effective complexity of a network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def train_l2():\n",
    "    np_load_old = np.load\n",
    "    np.load = lambda *a,**k: np_load_old(*a, allow_pickle=True, **k)\n",
    "    (train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=10000)\n",
    "    np.load = np_load_old\n",
    "    x_train = vectorize_sequences(train_data)\n",
    "    x_test = vectorize_sequences(test_data)\n",
    "    y_train = np.asarray(train_labels).astype('float32')\n",
    "    y_test = np.asarray(test_labels).astype('float32')    \n",
    "    \n",
    "    from keras import regularizers\n",
    "    l2_model = models.Sequential()\n",
    "    l2_model.add(layers.Dense(16, kernel_regularizer=regularizers.l2(0.001),\n",
    "                              activation='relu', input_shape=(10000,)))\n",
    "    l2_model.add(layers.Dense(16, kernel_regularizer=regularizers.l2(0.001),\n",
    "                              activation='relu'))\n",
    "    l2_model.add(layers.Dense(1, activation='sigmoid'))\n",
    "    l2_model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n",
    "    l2_model_hist = l2_model.fit(x_train, y_train, epochs=20, batch_size=512,\n",
    "                                 validation_data=(x_test, y_test), verbose=0)\n",
    "    df = pd.DataFrame.from_dict(data=l2_model_hist.history, orient='columns')\n",
    "    df.to_csv(base_dir+'\\\\history_imdb_l2.csv', header=True, index=False)\n",
    "    K.clear_session()\n",
    "    del l2_model\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(base_dir+'\\\\history_imdb_orig.csv')\n",
    "history = df.to_dict()\n",
    "original_val_loss = list(history['val_loss'].values())\n",
    "df = pd.read_csv(base_dir+'\\\\history_imdb_l2.csv')\n",
    "history = df.to_dict()\n",
    "l2_model_val_loss = list(history['val_loss'].values())\n",
    "\n",
    "plt.plot(epochs, original_val_loss, 'r', label='Original model')\n",
    "plt.plot(epochs, l2_model_val_loss, 'bo', label='L2-regularized model')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Validation loss')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Dropout"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Dropout is one of the most effective and most commonly used regularization techniques for neural networks, developed by Hinton at the University of Toronto. \n",
    "\n",
    "Dropout, applied to a layer, consists of randomly \"dropping out\" (i.e. setting to zero) a number of output features of the layer during training. \n",
    "\n",
    "Let's say a given layer would normally have returned a vector [0.2, 0.5, 1.3, 0.8, 1.1] for a given input sample during training; after applying dropout, this vector will have a few zero entries distributed at random, e.g. [0, 0.5, 1.3, 0, 1.1]. \n",
    "\n",
    "The \"dropout rate\" is the fraction of the features that are being zeroed-out; it is usually set between 0.2 and 0.5. At test time, no units are dropped out, and instead the layer's output values are scaled down by a factor equal to the dropout rate, so as to balance for the fact that more units are active than at training time.\n",
    "\n",
    "Consider a Numpy matrix containing the output of a layer, layer_output, of shape (batch_size, features). At training time, we would be zero-ing out at random a fraction of the values in the matrix:\n",
    "\n",
    "<img src=\"https://ml-cheatsheet.readthedocs.io/en/latest/_images/dropout.png\" width=\"300\">\n",
    "\n",
    "This technique may seem strange and arbitrary. Why would this help reduce overfitting? Geoff Hinton has said that he was inspired, among other things, by a fraud prevention mechanism used by banks -- in his own words: \"I went to my bank. The tellers kept changing and I asked one of them why. He said he didn’t know but they got moved around a lot. I figured it must be because it would require cooperation between employees to successfully defraud the bank. This made me realize that randomly removing a different subset of neurons on each example would prevent conspiracies and thus reduce overfitting\".\n",
    "\n",
    "The core idea is that introducing noise in the output values of a layer can break up happenstance patterns that are not significant (what Hinton refers to as \"conspiracies\"), which the network would start memorizing if no noise was present."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def dropout():\n",
    "    np_load_old = np.load\n",
    "    np.load = lambda *a,**k: np_load_old(*a, allow_pickle=True, **k)\n",
    "    (train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=10000)\n",
    "    np.load = np_load_old\n",
    "    x_train = vectorize_sequences(train_data)\n",
    "    x_test = vectorize_sequences(test_data)\n",
    "    y_train = np.asarray(train_labels).astype('float32')\n",
    "    y_test = np.asarray(test_labels).astype('float32')\n",
    "    \n",
    "    dpt_model = models.Sequential()\n",
    "    dpt_model.add(layers.Dense(16, activation='relu', input_shape=(10000,)))\n",
    "    dpt_model.add(layers.Dropout(0.5))\n",
    "    dpt_model.add(layers.Dense(16, activation='relu'))\n",
    "    dpt_model.add(layers.Dropout(0.5))\n",
    "    dpt_model.add(layers.Dense(1, activation='sigmoid'))\n",
    "    dpt_model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n",
    "    dpt_model_hist = dpt_model.fit(x_train, y_train, epochs=20, batch_size=512,\n",
    "                                   validation_data=(x_test, y_test), verbose=0)\n",
    "    df = pd.DataFrame.from_dict(data=dpt_model_hist.history, orient='columns')\n",
    "    df.to_csv(base_dir+'\\\\history_imdb_dpt.csv', header=True, index=False)\n",
    "    K.clear_session()\n",
    "    del dpt_model\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(base_dir+'\\\\history_imdb_orig.csv')\n",
    "history = df.to_dict()\n",
    "original_val_loss = list(history['val_loss'].values())\n",
    "df = pd.read_csv(base_dir+'\\\\history_imdb_dpt.csv')\n",
    "history = df.to_dict()\n",
    "dpt_model_val_loss = list(history['val_loss'].values())\n",
    "\n",
    "plt.plot(epochs, original_val_loss, 'r', label='Original model')\n",
    "plt.plot(epochs, dpt_model_val_loss, 'bo', label='Dropout-regularized model')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Validation loss')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "toggle()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "353px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "00bf363ee03348f7957bda3c3d370e18": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_options_labels": [
        "train",
        "test"
       ],
       "description": "Data:",
       "index": 0,
       "layout": "IPY_MODEL_ffd625deb7f74cf6ae5738e2bfe2b6a6",
       "style": "IPY_MODEL_1cbf408959844470b20740988f5a175d"
      }
     },
     "0203ab3a6aaf4e3dbc9dc0eff1b42803": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_3424315f4631432091a9ff5c8bd6d666",
       "step": 1,
       "style": "IPY_MODEL_ffe5304400b34ddfb1df91fe5319bc1d",
       "value": 7
      }
     },
     "0246781c8ec24f7d99125fc0782616dc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntSliderModel",
      "state": {
       "description": "Index of Review:",
       "layout": "IPY_MODEL_bef97f22ba7c4d0b9ff477cea22744ad",
       "max": 30,
       "style": "IPY_MODEL_c4b051fd59d54dbb8790f94dea27e3bb",
       "value": 10
      }
     },
     "04b767a81d0944dba2ead8668ac19e76": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "04f9f797c64248e4af714bf8531e68af": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_08acc8fb07b645b4a8e5e4c06a79acf2",
       "step": 1,
       "style": "IPY_MODEL_6da46a45492a441b89ed36b6d7374f78",
       "value": 7
      }
     },
     "050f0343a6b24b1abd8098a33d87b742": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "061b6993636f44748b4114ef125cb9d7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "077fc24d5af644e19739082db94c2424": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "08acc8fb07b645b4a8e5e4c06a79acf2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "08d3c57af91f4f50b801f9c0657b6161": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_7a3839b933004d2c8d78bbf350249a29",
       "step": 1,
       "style": "IPY_MODEL_74f9e018c8514b06b3e4165eaac3874b",
       "value": 7
      }
     },
     "09887a4db028419a8b915305bb3dc596": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "09b15fa5b18f4e66a21b993a01cc52af": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "0a0ed3865e004788aa0b3599e7e6675f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_f5bc55411bec44b284d7fa62e2fb3249",
       "step": 1,
       "style": "IPY_MODEL_9bb6f1f03e03469aa623d96c2f56e64b",
       "value": 7
      }
     },
     "0e68af9643e04611b92932eccd719a26": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "11a6857d875f4acb83478bda110e79bd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "13313fbf856e43b39a37bd2fa2d19a70": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_0246781c8ec24f7d99125fc0782616dc",
        "IPY_MODEL_cdb9e591531f4dcfb6b9f45f8627b91f"
       ],
       "layout": "IPY_MODEL_723b34a887da43a3adbd4c2574b760fa"
      }
     },
     "14c51d742a904d3c84f8f15e854c6797": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "14d14e3ba39a4e5ea533e6034ea41c61": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "153b5c35fb584fb8917e27a2d357e7ff": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "16491b9693c94beba852e7ff70f3b280": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "16bc57a869094e72874ea9898a795af9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "18c50ba68fbe4556b33dacd4fd6a9046": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "1cbf408959844470b20740988f5a175d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "1d652b788c33478d93221ef114501dbd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_e9816f18466b4e568584d6add4532980",
        "IPY_MODEL_9d06a471a71e41c49ad5b6d8257ee845"
       ],
       "layout": "IPY_MODEL_45355767ed8847cbba19a83d01d0dd08"
      }
     },
     "20fba55a99994535a76c5ac08e3bdfa8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "21f71d119b9b4f41b34c4cd309988a1f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "23c4045450634fab90db45a4c6e261dd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_901314f202fc4b999773f6c7ba660d49",
        "IPY_MODEL_f9e9325163a546a88fc18f40334f361a"
       ],
       "layout": "IPY_MODEL_70bf0c37b2c14faba03a648a689d8834"
      }
     },
     "257cb4ee537a43c499986d2b50c7a356": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntSliderModel",
      "state": {
       "description": "Index of Review:",
       "layout": "IPY_MODEL_04b767a81d0944dba2ead8668ac19e76",
       "max": 30,
       "style": "IPY_MODEL_e6a9e657953443758d3a006f60a57819",
       "value": 10
      }
     },
     "25eaa4e9bc2846a4a7cf0d8a29fb22ea": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "28e2a002a00845758ccd86455b2d3468": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_d315106cf8bd411e873ae2863582f81c",
        "IPY_MODEL_b019554219064eafb5866f080fedcfe3"
       ],
       "layout": "IPY_MODEL_815f53705b3b40769c3a56fe1774fc49"
      }
     },
     "2a38f2e171834b0a9293017c3f58bf1a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "2c9cd44ebeec4c2f9956b3774c03e3cd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "322fdf784e1e4d849bf0f037a41d558e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntSliderModel",
      "state": {
       "description": "Index of Review:",
       "layout": "IPY_MODEL_57835fb856f34f32bbb4aafcfa807fbe",
       "max": 30,
       "style": "IPY_MODEL_d4e44547191d40688e021359a3d61540",
       "value": 10
      }
     },
     "3424315f4631432091a9ff5c8bd6d666": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "3753f3b8ba004d4884ca7308818be833": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "39133ad48f7a499e9010126e2b582439": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_5eb400a82ac644189979c17d802e9cb8",
        "IPY_MODEL_e3e6b20177d944038b3844d5576b6f83",
        "IPY_MODEL_6a4dc20ccb094e21b0c845cfcec15ad6"
       ],
       "layout": "IPY_MODEL_a432eee686df497ab20ac113b38ecbd1"
      }
     },
     "3a5a38365ed9498d95193ce43d4cdedd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_727a2247b75a454b93e1d2baff432ac4",
       "step": 1,
       "style": "IPY_MODEL_98951294a23d417c81e5585e7b4173ca",
       "value": 7
      }
     },
     "3dbd0f5894cc4bf7a2cc86b3aeacba31": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_e2c2bafbc83a4a3fb46e3637e2143276",
       "outputs": [
        {
         "name": "stdout",
         "output_type": "stream",
         "text": "number of misclassified images: 201\n"
        },
        {
         "data": {
          "image/png": "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\n",
          "text/plain": "<Figure size 936x216 with 5 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "3e0c8724a05f43499af36f0e15a62fa8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_5c52e5a06d8f43f1a816af10e2bc1a86",
        "IPY_MODEL_a89d27c987254f789abf4457b4a0926b"
       ],
       "layout": "IPY_MODEL_be052ba2c9f84223b15117a3c71a0808"
      }
     },
     "3e528e65d85643a2800d13e6ac9e4b0e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_00bf363ee03348f7957bda3c3d370e18",
        "IPY_MODEL_04f9f797c64248e4af714bf8531e68af",
        "IPY_MODEL_74fd9120e9854e61a07186705fe8cb66"
       ],
       "layout": "IPY_MODEL_5273a7c367b545928701a550a51c5876"
      }
     },
     "3eb0b9047441411486fce956b2da2145": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "425af0d596e6424ab66bd85f1de77d4e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "43da0290f24a44858350691376eac244": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "45355767ed8847cbba19a83d01d0dd08": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "462555ad60f94272a2872b0d77db2a7a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_options_labels": [
        "train",
        "test"
       ],
       "description": "Data:",
       "index": 0,
       "layout": "IPY_MODEL_f6dc1523bef24aafaf8f45a9effcc0bd",
       "style": "IPY_MODEL_e319cfbd29ea4ae58e81ed711ecf904d"
      }
     },
     "47d2f1f0cc7643bf84045b399cb2c643": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_077fc24d5af644e19739082db94c2424",
       "outputs": [
        {
         "name": "stdout",
         "output_type": "stream",
         "text": "Review:\n ? french horror cinema has seen something of a revival over the last couple of years with great films such as inside and ? romance ? on to the scene ? ? the revival just slightly but stands head and shoulders over most modern horror titles and is surely one of the best french horror films ever made ? was obviously shot on a low budget but this is made up for in far more ways than one by the originality of the film and this in turn is ? by the excellent writing and acting that ensure the film is a winner the plot focuses on two main ideas prison and black magic the central character is a man named ? sent to prison for fraud he is put in a cell with three others the quietly insane ? body building ? marcus and his retarded boyfriend daisy after a short while in the cell together they stumble upon a hiding place in the wall that contains an old ? after ? part of it they soon realise its magical powers and realise they may be able to use it to break through the prison walls br br black magic is a very interesting topic and i'm actually quite surprised that there aren't more films based on it as there's so much scope for things to do with it it's fair to say that ? makes the best of it's ? as despite it's ? the film never actually feels restrained and manages to flow well throughout director eric ? provides a great atmosphere for the film the fact that most of it takes place inside the central prison cell ? that the film feels very claustrophobic and this immensely benefits the central idea of the prisoners wanting to use magic to break out of the cell it's very easy to get behind them it's often said that the unknown is the thing that really ? people and this film proves that as the director ? that we can never really be sure of exactly what is round the corner and this helps to ensure that ? actually does manage to be quite frightening the film is memorable for a lot of reasons outside the central plot the characters are all very interesting in their own way and the fact that the book itself almost takes on its own character is very well done anyone worried that the film won't deliver by the end won't be disappointed either as the ending both makes sense and manages to be quite horrifying overall ? is a truly great horror film and one of the best of the decade highly recommended viewing\nNumber of words: 450\nIndices for all ?s: [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n"
        }
       ]
      }
     },
     "4bbc3a3aecbf43048eb955d8069ec1b3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "4f0c9113dbd748738c067333885256ef": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "51102e478a5c4ab89414734a79c9d682": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_6778d44240b34bf386146cfeecee517f",
       "step": 1,
       "style": "IPY_MODEL_c47fc811fb80436f9d77307160a077d0",
       "value": 7
      }
     },
     "5173f8cae7804199bca6c0963f47904d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "5273a7c367b545928701a550a51c5876": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "53e88ab5afb74db5b0ee3a06f117d236": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_d174b654894140d58f3ec025c10ffbbb",
       "outputs": [
        {
         "name": "stdout",
         "output_type": "stream",
         "text": "Total number of misclassified images is 201 Examples of misclassified images 7-11\n"
        },
        {
         "data": {
          "image/png": "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SJ3v2keuua+c7t27J9ri1/999tlniT4vvPBCpB48eHC6A8ux4YYbRur4NdeorH322SfRFt/U7r/+678KHmfZsmWJtrFjxxa83V133RWpX3zxxUSfdu3aRepTTz010Sd+fWw895LUtm1D/xqqOfnW2zjX+v2R8q01mjZtWsHjmlmrz5VPfNOi/fffP5XjorIGDBgQqa+66qpEn8svj75TaL4Mxdeefe9730thdLWLV+4BAACAjGByDwAAAGQEk3sAAAAgI5jcAwAAABnRMCuZZsyYkWjbe++9I3Wpm0ZVUnzTj2OOOSbRZ9NNN43Ua665ptcxoWV77bVXom377beP1E8//XRJx47/rEtdqH3ssceWdDtUzmGHHRap8y1EveeeeyL1K6+8ksq5R40aVbDPDTfcULDPIYcckmiLLxTu3bt38QND2U444YRIfe+99yb6xBcoprXoNZ+0js0C2vozfvz4RFt8XnbppZcW7LPlllsm+hSzmWOW8Mo9AAAAkBFM7gEAAICMKDi5N7M7zOx9M5uV03aBmb1jZi+FH4P8DhNZQ67gA7mCL2QLPpAr+FDMNfejJV0v6a5Y+9XOuStTH1FKpk+fHqkvu+yyRJ9av8Z+q622SrQ9/vjjkbpr166VGk7aRqsOc5WW+LXR8etepWSGN95440SfSy65JFKPGDEi0eell14qOJ6NNtqoYJ86MVoZzVXPnj0j9VlnnZXok68tbuLEiZE6vlmaJP3973+P1M8++2wRIyws3/Xc8bZf/OIXiT7xjWxOP/30VMbTSqNV59maOXNmom3cuHGReunSpSUde+21147UV1xxRaLPW2+9Fanjmw+l6eyzz47Uf/jDHxJ92rdv7+38rTBadZ6rYsyePTvRFs9evszE12D8/Oc/T/SJry168MEHE30uvvjiSB1f65M1BV+5d849J+mjCowFDYRcwQdyBV/IFnwgV/ChnGvuTzazl8M/KXVMbURodOQKPpAr+EK24AO5QslKndzfJGlTSX0lNUm6qrmOZjbczKaa2dTFixeXeDo0CHIFH8gVfCkqW+QKrUSuUJaSJvfOuUXOua+dc/+RdKukAS30HeWc6++c69+5c+dSx4kGQK7gA7mCL8Vmi1yhNcgVylXSJlZm1tU51xSWgyXNaqm/b9OmTUu07bbbbpF6yZIllRpOXs65gn223nrrSP3b3/420aeOF9AWVGu58uk73/lOpJ4wYUKiz9y5cyN1r169En3iuc63sVHcJptskmjbcccdC96uXjVSrooR39wn32Y/X375ZaT+4osvEn3ii9/yLdx+9NFHWz2++++/P9H20EMPRepVV1010efkk09u9bnKVW/ZuummmxJtH374YauP86Mf/SjRduGFF0bqXXfdteBxPv3000TbLbfcEqlXrFjRytEF4vlca621En1qdWOjestVPvPnz4/U5557bqJP/PfeLrvskugTX4T9y1/+MtFn2bJlkTrfRnjnn39+pI6/QYGU3CiwnhWcCZjZvZIGSupkZgsl/V7SQDPrK8lJekvScR7HiAwiV/CBXMEXsgUfyBV8KDi5d84dmqf5dg9jQQMhV/CBXMEXsgUfyBV8YIdaAAAAICNKuua+1jz//POJtvhGHPGNEEq1xx57JNri1zCPGjWq4HHyjefEE0+M1Fm6/gutl+8a+7hHHnkkUk+dOrWk48bXAKCxxTf3ybfZT3xTmOXLlyf6/Pvf/47UCxcuTPSJb1r19ttvJ/p8/vnnkfrXv/51ok81rrmvdfF1EPG1C6WK/66SirvGPu7aa69NtMU3WcuXmVLk28AL/hx++OGResqUKYk+G2ywQaQeOXJkok98g8VOnTol+nz22WeResstt0z0GTx4cKSObwApSWussUakHjJkSKJPveCVewAAACAjmNwDAAAAGcHkHgAAAMgIJvcAAABARmRiQW2pfvrTn0bqvn37Jvocf/zxkXrddddN9IlvslHMgtp8Cz4OPvjggrdD7YsvIjz99NMTffr16xepTznllJLOdcMNN7T6NvkWwwHlWn311Qu2vfnmm4k+8Y358i2oRWlef/31SP3OO++UdJz449WgQYMK3ib+phaSdNttt0Xq0047LdEnrTe/iG8cudNOO6VyXCQtXrw40fbcc89F6nwbVD3zzDOpnD++EDafbbfdNlKPGzcu0Se+wDffRlfx49QqXrkHAAAAMoLJPQAAAJARTO4BAACAjMjENfe/+tWvEm35NpuK23jjjSP1aqutVvA2ixYtSrQNHDiw4O222GKLSP3YY48l+uS7nh/157777ovUo0ePTvSJr9MoRnyjDkn64osvWn0c1L74tcmSdOutt0bqPn36JPrccccd3sYU97e//S1S58vijTfeGKmfeuqpRJ8lS5a0+tyb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\n",
          "text/plain": "<Figure size 936x216 with 5 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "54fb9441b74f440aa9edb48b575fe8eb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "57835fb856f34f32bbb4aafcfa807fbe": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "5b9b8b60d7544b498e0d5e569a5d5ccd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_ffa0cace164a478ebe5ad8ec091c5bba",
        "IPY_MODEL_6500b5ca2d224603952d1bb96f8da826",
        "IPY_MODEL_87f6485ac22a4a058e882a8a6b156033"
       ],
       "layout": "IPY_MODEL_153b5c35fb584fb8917e27a2d357e7ff"
      }
     },
     "5c52e5a06d8f43f1a816af10e2bc1a86": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_7bea81170f2646ed8bc9095a92010872",
       "step": 1,
       "style": "IPY_MODEL_09887a4db028419a8b915305bb3dc596",
       "value": 7
      }
     },
     "5dc9deb986c44da7bc17e31ea7488c88": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_6b376c3f41244963bdd091069cc6f2c9",
       "outputs": [
        {
         "name": "stdout",
         "output_type": "stream",
         "text": "Review:\n ? french horror cinema has seen something of a revival over the last couple of years with great films such as inside and ? romance ? on to the scene ? ? the revival just slightly but stands head and shoulders over most modern horror titles and is surely one of the best french horror films ever made ? was obviously shot on a low budget but this is made up for in far more ways than one by the originality of the film and this in turn is ? by the excellent writing and acting that ensure the film is a winner the plot focuses on two main ideas prison and black magic the central character is a man named ? sent to prison for fraud he is put in a cell with three others the quietly insane ? body building ? marcus and his retarded boyfriend daisy after a short while in the cell together they stumble upon a hiding place in the wall that contains an old ? after ? part of it they soon realise its magical powers and realise they may be able to use it to break through the prison walls br br black magic is a very interesting topic and i'm actually quite surprised that there aren't more films based on it as there's so much scope for things to do with it it's fair to say that ? makes the best of it's ? as despite it's ? the film never actually feels restrained and manages to flow well throughout director eric ? provides a great atmosphere for the film the fact that most of it takes place inside the central prison cell ? that the film feels very claustrophobic and this immensely benefits the central idea of the prisoners wanting to use magic to break out of the cell it's very easy to get behind them it's often said that the unknown is the thing that really ? people and this film proves that as the director ? that we can never really be sure of exactly what is round the corner and this helps to ensure that ? actually does manage to be quite frightening the film is memorable for a lot of reasons outside the central plot the characters are all very interesting in their own way and the fact that the book itself almost takes on its own character is very well done anyone worried that the film won't deliver by the end won't be disappointed either as the ending both makes sense and manages to be quite horrifying overall ? is a truly great horror film and one of the best of the decade highly recommended viewing\nNumber of words: 450\nIndices for all ?s: [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n"
        }
       ]
      }
     },
     "5eb400a82ac644189979c17d802e9cb8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_options_labels": [
        "train",
        "test"
       ],
       "description": "Data:",
       "index": 0,
       "layout": "IPY_MODEL_4f0c9113dbd748738c067333885256ef",
       "style": "IPY_MODEL_ac0c8566cf6e48088522a63b178e0705"
      }
     },
     "630b31093115460b95709e2c1b3becd6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_7adb993b76b4499d8159dc73e5669d62",
       "step": 1,
       "style": "IPY_MODEL_18c50ba68fbe4556b33dacd4fd6a9046",
       "value": 7
      }
     },
     "6500b5ca2d224603952d1bb96f8da826": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_f86478cb72d94a96b69cae3c9dbb656a",
       "step": 1,
       "style": "IPY_MODEL_4bbc3a3aecbf43048eb955d8069ec1b3",
       "value": 7
      }
     },
     "66702ba0c33946128cb01d6a88926301": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_0a0ed3865e004788aa0b3599e7e6675f",
        "IPY_MODEL_53e88ab5afb74db5b0ee3a06f117d236"
       ],
       "layout": "IPY_MODEL_ac1fa630e83e4487b5f43e532336bb31"
      }
     },
     "6778d44240b34bf386146cfeecee517f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "6a4dc20ccb094e21b0c845cfcec15ad6": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_09b15fa5b18f4e66a21b993a01cc52af",
       "outputs": [
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 1080x216 with 5 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "6b376c3f41244963bdd091069cc6f2c9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "6da46a45492a441b89ed36b6d7374f78": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "6f98c9b8c46744dfa76bb21eb1dff97c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "70bf0c37b2c14faba03a648a689d8834": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "71903c8e5b20439da9375b774d4efa9e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_ac1840e3d4a349e69167fa8ab8bef5fd",
       "step": 1,
       "style": "IPY_MODEL_54fb9441b74f440aa9edb48b575fe8eb",
       "value": 7
      }
     },
     "723b34a887da43a3adbd4c2574b760fa": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "727a2247b75a454b93e1d2baff432ac4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "74f9e018c8514b06b3e4165eaac3874b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "74fd9120e9854e61a07186705fe8cb66": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_a23f9bf318ec4268aab0b525767942ed",
       "outputs": [
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 1080x216 with 5 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "75365cf49d534e29a903c621b47cb3cf": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "76bc179b4f4241c0925607af59f06155": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_43da0290f24a44858350691376eac244",
       "outputs": [
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 1080x216 with 5 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "79b18084094e4281ba4ec7d769911e49": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "layout": "IPY_MODEL_e6079fe551aa45ff9bcdb3e6c09acab3"
      }
     },
     "7a3839b933004d2c8d78bbf350249a29": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "7adb993b76b4499d8159dc73e5669d62": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "7bea81170f2646ed8bc9095a92010872": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "815f53705b3b40769c3a56fe1774fc49": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "83128e788adf4e6db12501730fabeaa3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "layout": "IPY_MODEL_5173f8cae7804199bca6c0963f47904d"
      }
     },
     "83e62511942c4f469b9ceb911035eb10": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "849a84d30fba4e559988fc68e4dedeed": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "85a51d8e47a14a96b6274cc29532e2ad": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "87f6485ac22a4a058e882a8a6b156033": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_21f71d119b9b4f41b34c4cd309988a1f",
       "outputs": [
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 1080x216 with 5 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "8bf1279f5c91430985f9e61053145282": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "901314f202fc4b999773f6c7ba660d49": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntSliderModel",
      "state": {
       "description": "Index of Review:",
       "layout": "IPY_MODEL_6f98c9b8c46744dfa76bb21eb1dff97c",
       "max": 30,
       "style": "IPY_MODEL_c179be7c8de04c93a67c39cfa9768d15",
       "value": 10
      }
     },
     "974d4e5ba8dd407f9df59413f3186a6a": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_16bc57a869094e72874ea9898a795af9",
       "outputs": [
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 1080x216 with 5 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "98951294a23d417c81e5585e7b4173ca": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "9bb6f1f03e03469aa623d96c2f56e64b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "9c9c11a2f6d2433e95bdb3db8040fa19": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "SliderStyleModel",
      "state": {
       "description_width": "initial"
      }
     },
     "9d06a471a71e41c49ad5b6d8257ee845": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_16491b9693c94beba852e7ff70f3b280",
       "outputs": [
        {
         "name": "stdout",
         "output_type": "stream",
         "text": "Review:\n ? french horror cinema has seen something of a revival over the last couple of years with great films such as inside and ? romance ? on to the scene ? ? the revival just slightly but stands head and shoulders over most modern horror titles and is surely one of the best french horror films ever made ? was obviously shot on a low budget but this is made up for in far more ways than one by the originality of the film and this in turn is ? by the excellent writing and acting that ensure the film is a winner the plot focuses on two main ideas prison and black magic the central character is a man named ? sent to prison for fraud he is put in a cell with three others the quietly insane ? body building ? marcus and his retarded boyfriend daisy after a short while in the cell together they stumble upon a hiding place in the wall that contains an old ? after ? part of it they soon realise its magical powers and realise they may be able to use it to break through the prison walls br br black magic is a very interesting topic and i'm actually quite surprised that there aren't more films based on it as there's so much scope for things to do with it it's fair to say that ? makes the best of it's ? as despite it's ? the film never actually feels restrained and manages to flow well throughout director eric ? provides a great atmosphere for the film the fact that most of it takes place inside the central prison cell ? that the film feels very claustrophobic and this immensely benefits the central idea of the prisoners wanting to use magic to break out of the cell it's very easy to get behind them it's often said that the unknown is the thing that really ? people and this film proves that as the director ? that we can never really be sure of exactly what is round the corner and this helps to ensure that ? actually does manage to be quite frightening the film is memorable for a lot of reasons outside the central plot the characters are all very interesting in their own way and the fact that the book itself almost takes on its own character is very well done anyone worried that the film won't deliver by the end won't be disappointed either as the ending both makes sense and manages to be quite horrifying overall ? is a truly great horror film and one of the best of the decade highly recommended viewing\nNumber of words: 450\nIndices for all ?s: [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n"
        }
       ]
      }
     },
     "9e75661d2f1345409423b3befee61b03": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "9f400bfa657a4b34b8b3735faf5d6add": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_options_labels": [
        "train",
        "test"
       ],
       "description": "Data:",
       "index": 0,
       "layout": "IPY_MODEL_0e68af9643e04611b92932eccd719a26",
       "style": "IPY_MODEL_11a6857d875f4acb83478bda110e79bd"
      }
     },
     "9fbeb80b4e6943a38885ba684a97cef4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_b4584cbc35c849999ab5e8bac72d0e42",
        "IPY_MODEL_630b31093115460b95709e2c1b3becd6",
        "IPY_MODEL_76bc179b4f4241c0925607af59f06155"
       ],
       "layout": "IPY_MODEL_061b6993636f44748b4114ef125cb9d7"
      }
     },
     "a01ca7688ff14f3db037925e37d4600d": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_c1179af3adca4944959492ba13b508eb",
       "outputs": [
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 1080x216 with 5 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "a0c2a9e6d4cf43ae9370725204824f31": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "a23f9bf318ec4268aab0b525767942ed": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "a432eee686df497ab20ac113b38ecbd1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "a89d27c987254f789abf4457b4a0926b": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_75365cf49d534e29a903c621b47cb3cf",
       "outputs": [
        {
         "name": "stdout",
         "output_type": "stream",
         "text": "Total number of misclassified images is 201 Examples of misclassified images 7-11\n"
        },
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 936x216 with 5 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "ab57acec05a8485c92a54e3335b00da3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_f5786f619bb84e12a49c55fe0b2856ae",
        "IPY_MODEL_3dbd0f5894cc4bf7a2cc86b3aeacba31"
       ],
       "layout": "IPY_MODEL_14d14e3ba39a4e5ea533e6034ea41c61"
      }
     },
     "ac0c8566cf6e48088522a63b178e0705": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "ac1840e3d4a349e69167fa8ab8bef5fd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "ac1fa630e83e4487b5f43e532336bb31": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "b019554219064eafb5866f080fedcfe3": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_ddb5ad72981c4118882e6937322f094c",
       "outputs": [
        {
         "name": "stdout",
         "output_type": "stream",
         "text": "number of misclassified images: 201 examples of misclassified images with index 7-11\n"
        },
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 936x216 with 5 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "b4382332a6af47c38bea0df979f9d7ac": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "b4584cbc35c849999ab5e8bac72d0e42": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_options_labels": [
        "train",
        "test"
       ],
       "description": "Data:",
       "index": 0,
       "layout": "IPY_MODEL_14c51d742a904d3c84f8f15e854c6797",
       "style": "IPY_MODEL_e0cdbb13a0fa42a0971a17c7d5a1c58c"
      }
     },
     "b59ebcd3f0c04c08aa8834e8b33e6e3d": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_f8dca74e036247c1ba1e2ead331ee32d",
       "outputs": [
        {
         "name": "stdout",
         "output_type": "stream",
         "text": "Total number of misclassified images is 201 Examples of misclassified images 7-11\n"
        },
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 936x216 with 5 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "be052ba2c9f84223b15117a3c71a0808": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "bef97f22ba7c4d0b9ff477cea22744ad": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "c1179af3adca4944959492ba13b508eb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "c179be7c8de04c93a67c39cfa9768d15": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "SliderStyleModel",
      "state": {
       "description_width": "initial"
      }
     },
     "c47fc811fb80436f9d77307160a077d0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "c4b051fd59d54dbb8790f94dea27e3bb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "SliderStyleModel",
      "state": {
       "description_width": "initial"
      }
     },
     "c8090b85872e4f21802fd2892658c80e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_322fdf784e1e4d849bf0f037a41d558e",
        "IPY_MODEL_47d2f1f0cc7643bf84045b399cb2c643"
       ],
       "layout": "IPY_MODEL_3eb0b9047441411486fce956b2da2145"
      }
     },
     "cdb9e591531f4dcfb6b9f45f8627b91f": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_25eaa4e9bc2846a4a7cf0d8a29fb22ea",
       "outputs": [
        {
         "name": "stdout",
         "output_type": "stream",
         "text": "Review:\n ? french horror cinema has seen something of a revival over the last couple of years with great films such as inside and ? romance ? on to the scene ? ? the revival just slightly but stands head and shoulders over most modern horror titles and is surely one of the best french horror films ever made ? was obviously shot on a low budget but this is made up for in far more ways than one by the originality of the film and this in turn is ? by the excellent writing and acting that ensure the film is a winner the plot focuses on two main ideas prison and black magic the central character is a man named ? sent to prison for fraud he is put in a cell with three others the quietly insane ? body building ? marcus and his retarded boyfriend daisy after a short while in the cell together they stumble upon a hiding place in the wall that contains an old ? after ? part of it they soon realise its magical powers and realise they may be able to use it to break through the prison walls br br black magic is a very interesting topic and i'm actually quite surprised that there aren't more films based on it as there's so much scope for things to do with it it's fair to say that ? makes the best of it's ? as despite it's ? the film never actually feels restrained and manages to flow well throughout director eric ? provides a great atmosphere for the film the fact that most of it takes place inside the central prison cell ? that the film feels very claustrophobic and this immensely benefits the central idea of the prisoners wanting to use magic to break out of the cell it's very easy to get behind them it's often said that the unknown is the thing that really ? people and this film proves that as the director ? that we can never really be sure of exactly what is round the corner and this helps to ensure that ? actually does manage to be quite frightening the film is memorable for a lot of reasons outside the central plot the characters are all very interesting in their own way and the fact that the book itself almost takes on its own character is very well done anyone worried that the film won't deliver by the end won't be disappointed either as the ending both makes sense and manages to be quite horrifying overall ? is a truly great horror film and one of the best of the decade highly recommended viewing\nNumber of words: 450\nIndices for all ?s: [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n"
        }
       ]
      }
     },
     "cebe385f735f40caa7c3a0da58542c7e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_257cb4ee537a43c499986d2b50c7a356",
        "IPY_MODEL_5dc9deb986c44da7bc17e31ea7488c88"
       ],
       "layout": "IPY_MODEL_daae070c515f413d91a96f3221a04bd9"
      }
     },
     "cfd355c843574843b1b04de9899e3877": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_ddd2b0666e814c0ea0190f6ebe8f5790",
       "outputs": [
        {
         "name": "stdout",
         "output_type": "stream",
         "text": "Total number of misclassified images is 201 Examples of misclassified images 7-11\n"
        },
        {
         "data": {
          "image/png": "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SJ3v2keuua+c7t27J9ri1/999tlniT4vvPBCpB48eHC6A8ux4YYbRur4NdeorH322SfRFt/U7r/+678KHmfZsmWJtrFjxxa83V133RWpX3zxxUSfdu3aRepTTz010Sd+fWw895LUtm1D/xqqOfnW2zjX+v2R8q01mjZtWsHjmlmrz5VPfNOi/fffP5XjorIGDBgQqa+66qpEn8svj75TaL4Mxdeefe9730thdLWLV+4BAACAjGByDwAAAGQEk3sAAAAgI5jcAwAAABnRMCuZZsyYkWjbe++9I3Wpm0ZVUnzTj2OOOSbRZ9NNN43Ua665ptcxoWV77bVXom377beP1E8//XRJx47/rEtdqH3ssceWdDtUzmGHHRap8y1EveeeeyL1K6+8ksq5R40aVbDPDTfcULDPIYcckmiLLxTu3bt38QND2U444YRIfe+99yb6xBcoprXoNZ+0js0C2vozfvz4RFt8XnbppZcW7LPlllsm+hSzmWOW8Mo9AAAAkBFM7gEAAICMKDi5N7M7zOx9M5uV03aBmb1jZi+FH4P8DhNZQ67gA7mCL2QLPpAr+FDMNfejJV0v6a5Y+9XOuStTH1FKpk+fHqkvu+yyRJ9av8Z+q622SrQ9/vjjkbpr166VGk7aRqsOc5WW+LXR8etepWSGN95440SfSy65JFKPGDEi0eell14qOJ6NNtqoYJ86MVoZzVXPnj0j9VlnnZXok68tbuLEiZE6vlmaJP3973+P1M8++2wRIyws3/Xc8bZf/OIXiT7xjWxOP/30VMbTSqNV59maOXNmom3cuHGReunSpSUde+21147UV1xxRaLPW2+9Fanjmw+l6eyzz47Uf/jDHxJ92rdv7+38rTBadZ6rYsyePTvRFs9evszE12D8/Oc/T/SJry168MEHE30uvvjiSB1f65M1BV+5d849J+mjCowFDYRcwQdyBV/IFnwgV/ChnGvuTzazl8M/KXVMbURodOQKPpAr+EK24AO5QslKndzfJGlTSX0lNUm6qrmOZjbczKaa2dTFixeXeDo0CHIFH8gVfCkqW+QKrUSuUJaSJvfOuUXOua+dc/+RdKukAS30HeWc6++c69+5c+dSx4kGQK7gA7mCL8Vmi1yhNcgVylXSJlZm1tU51xSWgyXNaqm/b9OmTUu07bbbbpF6yZIllRpOXs65gn223nrrSP3b3/420aeOF9AWVGu58uk73/lOpJ4wYUKiz9y5cyN1r169En3iuc63sVHcJptskmjbcccdC96uXjVSrooR39wn32Y/X375ZaT+4osvEn3ii9/yLdx+9NFHWz2++++/P9H20EMPRepVV1010efkk09u9bnKVW/ZuummmxJtH374YauP86Mf/SjRduGFF0bqXXfdteBxPv3000TbLbfcEqlXrFjRytEF4vlca621En1qdWOjestVPvPnz4/U5557bqJP/PfeLrvskugTX4T9y1/+MtFn2bJlkTrfRnjnn39+pI6/QYGU3CiwnhWcCZjZvZIGSupkZgsl/V7SQDPrK8lJekvScR7HiAwiV/CBXMEXsgUfyBV8KDi5d84dmqf5dg9jQQMhV/CBXMEXsgUfyBV8YIdaAAAAICNKuua+1jz//POJtvhGHPGNEEq1xx57JNri1zCPGjWq4HHyjefEE0+M1Fm6/gutl+8a+7hHHnkkUk+dOrWk48bXAKCxxTf3ybfZT3xTmOXLlyf6/Pvf/47UCxcuTPSJb1r19ttvJ/p8/vnnkfrXv/51ok81rrmvdfF1EPG1C6WK/66SirvGPu7aa69NtMU3WcuXmVLk28AL/hx++OGResqUKYk+G2ywQaQeOXJkok98g8VOnTol+nz22WeResstt0z0GTx4cKSObwApSWussUakHjJkSKJPveCVewAAACAjmNwDAAAAGcHkHgAAAMgIJvcAAABARmRiQW2pfvrTn0bqvn37Jvocf/zxkXrddddN9IlvslHMgtp8Cz4OPvjggrdD7YsvIjz99NMTffr16xepTznllJLOdcMNN7T6NvkWwwHlWn311Qu2vfnmm4k+8Y358i2oRWlef/31SP3OO++UdJz449WgQYMK3ib+phaSdNttt0Xq0047LdEnrTe/iG8cudNOO6VyXCQtXrw40fbcc89F6nwbVD3zzDOpnD++EDafbbfdNlKPGzcu0Se+wDffRlfx49QqXrkHAAAAMoLJPQAAAJARTO4BAACAjMjENfe/+tWvEm35NpuK23jjjSP1aqutVvA2ixYtSrQNHDiw4O222GKLSP3YY48l+uS7nh/157777ovUo0ePTvSJr9MoRnyjDkn64osvWn0c1L74tcmSdOutt0bqPn36JPrccccd3sYU97e//S1S58vijTfeGKmfeuqpRJ8lS5a0+tyb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\n",
          "text/plain": "<Figure size 936x216 with 5 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "d174b654894140d58f3ec025c10ffbbb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "d315106cf8bd411e873ae2863582f81c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_fa7a2ebe4a454c86bada9a1e5edb08e5",
       "step": 1,
       "style": "IPY_MODEL_9e75661d2f1345409423b3befee61b03",
       "value": 7
      }
     },
     "d4e44547191d40688e021359a3d61540": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "SliderStyleModel",
      "state": {
       "description_width": "initial"
      }
     },
     "daae070c515f413d91a96f3221a04bd9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "dc4a05f64e094af4af7141dfef497be4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_51102e478a5c4ab89414734a79c9d682",
        "IPY_MODEL_cfd355c843574843b1b04de9899e3877"
       ],
       "layout": "IPY_MODEL_b4382332a6af47c38bea0df979f9d7ac"
      }
     },
     "ddb5ad72981c4118882e6937322f094c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "ddd2b0666e814c0ea0190f6ebe8f5790": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "e0cdbb13a0fa42a0971a17c7d5a1c58c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "e2c2bafbc83a4a3fb46e3637e2143276": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "e319cfbd29ea4ae58e81ed711ecf904d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "e39de2a2c881429e94b93f4ba2d82c61": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_462555ad60f94272a2872b0d77db2a7a",
        "IPY_MODEL_71903c8e5b20439da9375b774d4efa9e",
        "IPY_MODEL_974d4e5ba8dd407f9df59413f3186a6a"
       ],
       "layout": "IPY_MODEL_849a84d30fba4e559988fc68e4dedeed"
      }
     },
     "e3e6b20177d944038b3844d5576b6f83": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_f36ab5cfcde94783bedbd2774b1b3103",
       "step": 1,
       "style": "IPY_MODEL_8bf1279f5c91430985f9e61053145282",
       "value": 7
      }
     },
     "e440a65dae6d42989b819f16c73d5091": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_9f400bfa657a4b34b8b3735faf5d6add",
        "IPY_MODEL_0203ab3a6aaf4e3dbc9dc0eff1b42803",
        "IPY_MODEL_a01ca7688ff14f3db037925e37d4600d"
       ],
       "layout": "IPY_MODEL_85a51d8e47a14a96b6274cc29532e2ad"
      }
     },
     "e6079fe551aa45ff9bcdb3e6c09acab3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "e6a9e657953443758d3a006f60a57819": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "SliderStyleModel",
      "state": {
       "description_width": "initial"
      }
     },
     "e9816f18466b4e568584d6add4532980": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntSliderModel",
      "state": {
       "description": "Index of Review:",
       "layout": "IPY_MODEL_2c9cd44ebeec4c2f9956b3774c03e3cd",
       "max": 30,
       "style": "IPY_MODEL_9c9c11a2f6d2433e95bdb3db8040fa19",
       "value": 10
      }
     },
     "ecf57b78510f4f118c4930f16378cafd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_08d3c57af91f4f50b801f9c0657b6161",
        "IPY_MODEL_b59ebcd3f0c04c08aa8834e8b33e6e3d"
       ],
       "layout": "IPY_MODEL_ee55addc045d4b10b84a9f5dc3c61b38"
      }
     },
     "ee55addc045d4b10b84a9f5dc3c61b38": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "f36ab5cfcde94783bedbd2774b1b3103": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "f3743900c3d94418932cca6323f92876": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_3753f3b8ba004d4884ca7308818be833",
       "step": 1,
       "style": "IPY_MODEL_050f0343a6b24b1abd8098a33d87b742",
       "value": 7
      }
     },
     "f5786f619bb84e12a49c55fe0b2856ae": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_a0c2a9e6d4cf43ae9370725204824f31",
       "step": 1,
       "style": "IPY_MODEL_2a38f2e171834b0a9293017c3f58bf1a",
       "value": 9
      }
     },
     "f5bc55411bec44b284d7fa62e2fb3249": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "f6dc1523bef24aafaf8f45a9effcc0bd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "f86478cb72d94a96b69cae3c9dbb656a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "f8dca74e036247c1ba1e2ead331ee32d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "f9e9325163a546a88fc18f40334f361a": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_20fba55a99994535a76c5ac08e3bdfa8",
       "outputs": [
        {
         "name": "stdout",
         "output_type": "stream",
         "text": "Review:\n ? french horror cinema has seen something of a revival over the last couple of years with great films such as inside and ? romance ? on to the scene ? ? the revival just slightly but stands head and shoulders over most modern horror titles and is surely one of the best french horror films ever made ? was obviously shot on a low budget but this is made up for in far more ways than one by the originality of the film and this in turn is ? by the excellent writing and acting that ensure the film is a winner the plot focuses on two main ideas prison and black magic the central character is a man named ? sent to prison for fraud he is put in a cell with three others the quietly insane ? body building ? marcus and his retarded boyfriend daisy after a short while in the cell together they stumble upon a hiding place in the wall that contains an old ? after ? part of it they soon realise its magical powers and realise they may be able to use it to break through the prison walls br br black magic is a very interesting topic and i'm actually quite surprised that there aren't more films based on it as there's so much scope for things to do with it it's fair to say that ? makes the best of it's ? as despite it's ? the film never actually feels restrained and manages to flow well throughout director eric ? provides a great atmosphere for the film the fact that most of it takes place inside the central prison cell ? that the film feels very claustrophobic and this immensely benefits the central idea of the prisoners wanting to use magic to break out of the cell it's very easy to get behind them it's often said that the unknown is the thing that really ? people and this film proves that as the director ? that we can never really be sure of exactly what is round the corner and this helps to ensure that ? actually does manage to be quite frightening the film is memorable for a lot of reasons outside the central plot the characters are all very interesting in their own way and the fact that the book itself almost takes on its own character is very well done anyone worried that the film won't deliver by the end won't be disappointed either as the ending both makes sense and manages to be quite horrifying overall ? is a truly great horror film and one of the best of the decade highly recommended viewing\nNumber of words: 450\nIndices for all ?s: [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n"
        }
       ]
      }
     },
     "fa7a2ebe4a454c86bada9a1e5edb08e5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "ffa0cace164a478ebe5ad8ec091c5bba": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_options_labels": [
        "train",
        "test"
       ],
       "description": "Data:",
       "index": 0,
       "layout": "IPY_MODEL_83e62511942c4f469b9ceb911035eb10",
       "style": "IPY_MODEL_425af0d596e6424ab66bd85f1de77d4e"
      }
     },
     "ffd625deb7f74cf6ae5738e2bfe2b6a6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "ffe5304400b34ddfb1df91fe5319bc1d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
