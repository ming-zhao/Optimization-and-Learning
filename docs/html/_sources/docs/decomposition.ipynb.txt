{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Decomposition Methods"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "import gurobipy as gb\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>maxprod</th>\n",
       "      <th>price</th>\n",
       "      <th>uppremium</th>\n",
       "      <th>downpremium</th>\n",
       "      <th>upflex</th>\n",
       "      <th>downflex</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gen</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>g1</th>\n",
       "      <td>80</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>g2</th>\n",
       "      <td>60</td>\n",
       "      <td>20</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>g3</th>\n",
       "      <td>40</td>\n",
       "      <td>30</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>g4</th>\n",
       "      <td>40</td>\n",
       "      <td>40</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>g5</th>\n",
       "      <td>50</td>\n",
       "      <td>100</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     maxprod  price  uppremium  downpremium  upflex  downflex\n",
       "gen                                                          \n",
       "g1        80     10          2            8    0.10      0.10\n",
       "g2        60     20          4            7    0.15      0.15\n",
       "g3        40     30          6            6    0.20      0.20\n",
       "g4        40     40          8            5    0.50      0.50\n",
       "g5        50    100         10            2    1.00      1.00"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('https://raw.githubusercontent.com/ming-zhao/Optimization-and-Learning/master/data/benders.csv',\n",
    "                 index_col='gen', skipinitialspace=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Class which can have attributes set\n",
    "class expando(object):\n",
    "    pass\n",
    "\n",
    "\n",
    "class Benders_Master:\n",
    "    def __init__(self, max_iters=25, verbose=True, numscenarios=100, demand_avg=200.0, demand_std=20.0, epsilon=0.001, delta=0.001):\n",
    "        '''\n",
    "            Class which solves the benders decomposed version of the dispatch problem.\n",
    "\n",
    "            Parameters\n",
    "            ----------\n",
    "            max_iters: int, default 25\n",
    "                    Maximum number of Benders iterations to run.\n",
    "            verbose: boolean, default True\n",
    "                    Print information on upper and lower bounds for each iteration\n",
    "            numscenarios: int, default 100\n",
    "                    Number of scenarios to use for subproblems\n",
    "            demand_avg: float, default 200.0\n",
    "                    Average demand, used as day-ahead bid.\n",
    "            demand_std: float, default 20.0\n",
    "                    Standard deviation for demand in scenario generation.\n",
    "            epsilon: float, default 0.001\n",
    "                    Relative threshold for benders iterations.\n",
    "                    Iterations will stop if ub - lb > |epsilon * lb|\n",
    "            delta: float, default 0.001\n",
    "                    Absolute threshold for benders iterations.\n",
    "                    Iterations will stop if ub < lb + delta\n",
    "        '''\n",
    "        self.data = expando()\n",
    "        self.variables = expando()\n",
    "        self.constraints = expando()\n",
    "        self.results = expando()\n",
    "        self.params = expando()\n",
    "\n",
    "        self.params.max_iters = max_iters\n",
    "        self.params.verbose = verbose\n",
    "        self.params.numscenarios = numscenarios\n",
    "        self.params.demand_avg = demand_avg\n",
    "        self.params.demand_std = demand_std\n",
    "\n",
    "        self._init_benders_params(epsilon=epsilon, delta=delta)\n",
    "        self._load_data()\n",
    "        self._build_model()\n",
    "\n",
    "    def optimize(self, force_submodel_rebuild=False):\n",
    "        # initial solution\n",
    "        self.model.optimize()\n",
    "\n",
    "        # Only build submodels if they don't exist or a rebuild is forced.\n",
    "        if not hasattr(self, 'submodels') or force_submodel_rebuild:\n",
    "            self.submodels = {s: Benders_Subproblem(self, scenario=s) for s in self.data.scenarios}\n",
    "        # Update fixed variables for submodels and rebuild.\n",
    "        [sm.update_fixed_vars(self) for sm in self.submodels.values()]\n",
    "        [sm.optimize() for sm in self.submodels.values()]\n",
    "\n",
    "        # Update bounds based on submodel rebuild\n",
    "        self._update_bounds()\n",
    "        self._save_vars()\n",
    "        # Build cuts until we reach absolute and relative tolerance,\n",
    "        # or max_iters cuts have been generated.\n",
    "        while (\n",
    "            (self.data.ub > self.data.lb + self.data.delta or\n",
    "             self.data.ub - self.data.lb > abs(self.data.epsilon * self.data.lb)) and\n",
    "                len(self.data.cutlist) < self.params.max_iters):\n",
    "            # Generate new cut.\n",
    "            if self.params.verbose:\n",
    "                print('********')\n",
    "                print('* Benders\\' step {0}:'.format(len(self.data.upper_bounds)))\n",
    "                print('* Upper bound: {0}'.format(self.data.ub))\n",
    "                print('* Lower bound: {0}'.format(self.data.lb))\n",
    "                print('********')\n",
    "            self._do_benders_step()\n",
    "        pass\n",
    "\n",
    "    def _do_benders_step(self):\n",
    "            self._add_cut()\n",
    "            self._start_from_previous()\n",
    "            self.model.optimize()\n",
    "            [sm.update_fixed_vars(self) for sm in self.submodels.values()]\n",
    "            [sm.optimize() for sm in self.submodels.values()]\n",
    "            self._update_bounds()\n",
    "            self._save_vars()\n",
    "\n",
    "    def _init_benders_params(self, epsilon=0.001, delta=0.001):\n",
    "        self.data.cutlist = []\n",
    "        self.data.upper_bounds = []\n",
    "        self.data.lower_bounds = []\n",
    "        self.data.mipgap = []\n",
    "        self.data.solvetime = []\n",
    "        self.data.alphas = []\n",
    "        self.data.lambdas = {}\n",
    "        self.data.epsilon = epsilon\n",
    "        self.data.delta = delta\n",
    "        self.data.ub = gb.GRB.INFINITY\n",
    "        self.data.lb = -gb.GRB.INFINITY\n",
    "\n",
    "    ###\n",
    "    # Data Loading\n",
    "    ###\n",
    "    def _load_data(self):\n",
    "        self._load_generator_data()\n",
    "        self._load_demand_data()\n",
    "\n",
    "    def _load_generator_data(self):\n",
    "        self.data.geninfo = pd.read_csv('https://raw.githubusercontent.com/ming-zhao/Optimization-and-Learning/master/data/benders.csv', index_col='gen', skipinitialspace=True)\n",
    "        self.data.generators = self.data.geninfo.index\n",
    "\n",
    "    def _load_demand_data(self):\n",
    "        self.data.VOLL = 1000\n",
    "        self.data.demand_da = self.params.demand_avg\n",
    "        self.data.scenarios = ['s'+str(i) for i in range(self.params.numscenarios)]\n",
    "        self.data.demand_rt = pd.Series(\n",
    "            data=np.random.normal(self.params.demand_avg, self.params.demand_std, size=self.params.numscenarios),\n",
    "            index=self.data.scenarios)\n",
    "        self.data.scenarioprobs = {s: 1.0/self.params.numscenarios for s in self.data.scenarios}\n",
    "        # Dump load\n",
    "        self.data.dumploadprice = 10\n",
    "        self.data.dumploadmax = self.data.demand_da\n",
    "\n",
    "    ###\n",
    "    # Model Building\n",
    "    ###\n",
    "    def _build_model(self):\n",
    "        self.model = gb.Model()\n",
    "        self._build_variables()\n",
    "        self._build_objective()\n",
    "        self._build_constraints()\n",
    "        self.model.update()\n",
    "\n",
    "    def _build_variables(self):\n",
    "        m = self.model\n",
    "        gens = self.data.generators\n",
    "        geninfo = self.data.geninfo\n",
    "\n",
    "        self.variables.gprod_da = {}\n",
    "        for g in gens:\n",
    "            self.variables.gprod_da[g] = m.addVar(lb=0, ub=geninfo.maxprod[g])\n",
    "\n",
    "        self.variables.load_da = m.addVar(lb=0, ub=self.data.demand_da)\n",
    "\n",
    "        # Benders' proxy variable\n",
    "        self.variables.alpha = m.addVar(lb=-self.data.demand_da*self.data.VOLL, ub=gb.GRB.INFINITY)\n",
    "\n",
    "        m.update()\n",
    "\n",
    "    def _build_objective(self):\n",
    "        m = self.model\n",
    "        gens = self.data.generators\n",
    "        geninfo = self.data.geninfo\n",
    "\n",
    "        self.objective = m.setObjective(\n",
    "            gb.quicksum(geninfo.price[g] * self.variables.gprod_da[g] for g in gens) -\n",
    "            self.data.VOLL*self.variables.load_da +\n",
    "            self.variables.alpha)\n",
    "\n",
    "    def _build_constraints(self):\n",
    "        m = self.model\n",
    "        gens = self.data.generators\n",
    "        geninfo = self.data.geninfo\n",
    "\n",
    "        self.constraints.powerbalance_da = m.addConstr(\n",
    "            gb.quicksum(self.variables.gprod_da[g] for g in gens),\n",
    "            gb.GRB.EQUAL,\n",
    "            self.variables.load_da)\n",
    "\n",
    "        self.constraints.cuts = {}\n",
    "\n",
    "    def _add_cut(self):\n",
    "        gens = self.data.generators\n",
    "        geninfo = self.data.geninfo\n",
    "\n",
    "        cut = len(self.data.cutlist)\n",
    "        self.data.cutlist.append(cut)\n",
    "\n",
    "        # Get sensitivities from subproblem\n",
    "        sens_gen = {\n",
    "            g: sum(self.data.scenarioprobs[s] * self.submodels[s].constraints.fixed_da[g].pi for s in self.data.scenarios)\n",
    "            for g in gens}\n",
    "        self.data.lambdas[cut] = sens_gen\n",
    "        sens_load = sum(self.data.scenarioprobs[s] * self.submodels[s].constraints.fixed_load_da.pi for s in self.data.scenarios)\n",
    "        # Get subproblem objectives)\n",
    "        z_sub = sum(self.data.scenarioprobs[s] * self.submodels[s].model.ObjVal for s in self.data.scenarios)\n",
    "        # Generate cut\n",
    "        self.constraints.cuts[cut] = self.model.addConstr(\n",
    "            self.variables.alpha,\n",
    "            gb.GRB.GREATER_EQUAL,\n",
    "            z_sub +\n",
    "            gb.quicksum(sens_gen[g] * self.variables.gprod_da[g] for g in gens) -\n",
    "            sum(sens_gen[g] * self.variables.gprod_da[g].x for g in gens) +\n",
    "            sens_load * (self.variables.load_da - self.variables.load_da.x)\n",
    "        )\n",
    "\n",
    "    def _clear_cuts(self):\n",
    "        self.data.cutlist = []\n",
    "        self.data.lambdas = {}\n",
    "        self.model.update()\n",
    "        for con in self.constraints.cuts.values():\n",
    "            self.model.remove(con)\n",
    "        self.constraints.cuts = {}\n",
    "        self.data.ub = gb.GRB.INFINITY\n",
    "        self.data.lb = -gb.GRB.INFINITY\n",
    "        self.data.upper_bounds = []\n",
    "        self.data.lower_bounds = []\n",
    "\n",
    "    ###\n",
    "    # Update upper and lower bounds for Benders' iterations\n",
    "    ###\n",
    "    def _update_bounds(self):\n",
    "        z_sub = sum(self.data.scenarioprobs[s] * self.submodels[s].model.ObjVal for s in self.data.scenarios)\n",
    "        z_master = self.model.ObjVal\n",
    "        # The best upper bound is the best incumbent with\n",
    "        # alpha replaced by the sub problems' actual cost\n",
    "        self.data.ub = z_master - self.variables.alpha.x + z_sub\n",
    "        # The best lower bound is the current bestbound,\n",
    "        # This will equal z_master at optimality\n",
    "        try:\n",
    "            self.data.lb = self.model.ObjBound\n",
    "        except gb.GurobiError:\n",
    "            self.data.lb = self.model.ObjVal\n",
    "        self.data.upper_bounds.append(self.data.ub)\n",
    "        self.data.lower_bounds.append(self.data.lb)\n",
    "        self.data.mipgap.append(self.model.params.IntFeasTol)\n",
    "        self.data.solvetime.append(self.model.Runtime)\n",
    "\n",
    "    def _save_vars(self):\n",
    "        # self.data.xs.append(self.variables.x.x)\n",
    "        # self.data.ys.append(self.submodel.variables.y.x)\n",
    "        self.data.alphas.append(self.variables.alpha.x)\n",
    "\n",
    "    def _start_from_previous(self):\n",
    "        '''\n",
    "            Used to warm-start MIP problems.\n",
    "        '''\n",
    "        pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Benders_Subproblem:\n",
    "    def __init__(self, MP, scenario=0):\n",
    "        self.data = expando()\n",
    "        self.variables = expando()\n",
    "        self.constraints = expando()\n",
    "        self.results = expando()\n",
    "        \n",
    "        self.MP = MP\n",
    "        self.data.scenario = scenario\n",
    "\n",
    "        self._build_model()\n",
    "        self.update_fixed_vars(MP)\n",
    "\n",
    "    def optimize(self):\n",
    "        self.model.optimize()\n",
    "\n",
    "    ###\n",
    "    #   Model Building\n",
    "    ###\n",
    "    def _build_model(self):\n",
    "        self.model = gb.Model()\n",
    "        self.model.setParam('OutputFlag', False)\n",
    "        self._build_variables()\n",
    "        self._build_objective()\n",
    "        self._build_constraints()\n",
    "        self.model.update()\n",
    "\n",
    "    def _build_variables(self):\n",
    "        m = self.model\n",
    "\n",
    "        dumploadmax = self.MP.data.dumploadmax\n",
    "        gens = self.MP.data.generators\n",
    "        geninfo = self.MP.data.geninfo\n",
    "        s = self.data.scenario\n",
    "        demandmax = self.MP.data.demand_rt[s]\n",
    "\n",
    "        # Production of generator g, up and downregulation\n",
    "        # Up and down regulation are limited by the generators' capability.\n",
    "        self.variables.gprod_da = {}\n",
    "        self.variables.gprod_rt = {}\n",
    "        self.variables.gprod_rt_up = {}\n",
    "        self.variables.gprod_rt_down = {}\n",
    "        for g in gens:\n",
    "            self.variables.gprod_da[g] = m.addVar(lb=0.0, ub=geninfo.maxprod[g])\n",
    "            self.variables.gprod_rt[g] = m.addVar(lb=0.0, ub=geninfo.maxprod[g])\n",
    "            self.variables.gprod_rt_up[g] = m.addVar(lb=0.0, ub=geninfo.maxprod[g] * geninfo.upflex[g])\n",
    "            self.variables.gprod_rt_down[g] = m.addVar(lb=0.0, ub=geninfo.maxprod[g] * geninfo.downflex[g])\n",
    "\n",
    "        self.variables.loadserved = m.addVar(lb=0.0, ub=demandmax)\n",
    "        self.variables.loadserved_DA = m.addVar(lb=0.0, ub=gb.GRB.INFINITY)\n",
    "        self.variables.dumpload = m.addVar(lb=0.0, ub=dumploadmax)\n",
    "\n",
    "        m.update()\n",
    "\n",
    "    def _build_objective(self):\n",
    "        m = self.model\n",
    "        gens = self.MP.data.generators\n",
    "        geninfo = self.MP.data.geninfo\n",
    "        VOLL = self.MP.data.VOLL\n",
    "        dumploadprice = self.MP.data.dumploadprice\n",
    "\n",
    "        m.setObjective(\n",
    "            gb.quicksum((geninfo.price[g] + geninfo.uppremium[g])*self.variables.gprod_rt_up[g] for g in gens) +\n",
    "            gb.quicksum((- geninfo.price[g] + geninfo.downpremium[g])*self.variables.gprod_rt_down[g] for g in gens) -\n",
    "            VOLL*(self.variables.loadserved-self.variables.loadserved_DA) +\n",
    "            dumploadprice * self.variables.dumpload\n",
    "        )\n",
    "\n",
    "    def _build_constraints(self):\n",
    "        m = self.model\n",
    "        gens = self.MP.data.generators\n",
    "\n",
    "        self.constraints.powerbalance_rt = m.addConstr(\n",
    "            gb.quicksum(self.variables.gprod_rt[g] for g in gens),\n",
    "            gb.GRB.EQUAL,\n",
    "            self.variables.loadserved + self.variables.dumpload)\n",
    "\n",
    "        self.constraints.coupling_da = {}\n",
    "        self.constraints.fixed_da = {}\n",
    "        for g in gens:\n",
    "            self.constraints.coupling_da[g] = m.addConstr(\n",
    "                self.variables.gprod_rt[g],\n",
    "                gb.GRB.EQUAL,\n",
    "                self.variables.gprod_da[g] + self.variables.gprod_rt_up[g] - self.variables.gprod_rt_down[g])\n",
    "            self.constraints.fixed_da[g] = m.addConstr(\n",
    "                self.variables.gprod_da[g],\n",
    "                gb.GRB.EQUAL,\n",
    "                0.0)\n",
    "        self.constraints.fixed_load_da = m.addConstr(\n",
    "            self.variables.loadserved_DA,\n",
    "            gb.GRB.EQUAL,\n",
    "            0.0)\n",
    "\n",
    "    def update_fixed_vars(self, MP):\n",
    "        for g in self.MP.data.generators:\n",
    "                self.constraints.fixed_da[g].rhs = MP.variables.gprod_da[g].x\n",
    "        self.constraints.fixed_load_da.rhs = MP.variables.load_da.x\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "********\n",
      "* Benders' step 1:\n",
      "* Upper bound: -194905.0151374541\n",
      "* Lower bound: -396000.0\n",
      "********\n",
      "********\n",
      "* Benders' step 2:\n",
      "* Upper bound: -187402.87165686628\n",
      "* Lower bound: -195412.41513745408\n",
      "********\n",
      "********\n",
      "* Benders' step 3:\n",
      "* Upper bound: -190056.8887556546\n",
      "* Lower bound: -195394.04089071462\n",
      "********\n",
      "********\n",
      "* Benders' step 4:\n",
      "* Upper bound: -190189.18706464546\n",
      "* Lower bound: -195387.0448463883\n",
      "********\n",
      "********\n",
      "* Benders' step 5:\n",
      "* Upper bound: -191926.79858712998\n",
      "* Lower bound: -195371.37543796783\n",
      "********\n",
      "********\n",
      "* Benders' step 6:\n",
      "* Upper bound: -193053.94425360794\n",
      "* Lower bound: -195252.92352163696\n",
      "********\n",
      "********\n",
      "* Benders' step 7:\n",
      "* Upper bound: -193094.90138226718\n",
      "* Lower bound: -195252.59889917375\n",
      "********\n",
      "********\n",
      "* Benders' step 8:\n",
      "* Upper bound: -193758.79224701668\n",
      "* Lower bound: -195237.6931196585\n",
      "********\n",
      "********\n",
      "* Benders' step 9:\n",
      "* Upper bound: -193659.98456954808\n",
      "* Lower bound: -195220.181321286\n",
      "********\n",
      "********\n",
      "* Benders' step 10:\n",
      "* Upper bound: -194260.30295156644\n",
      "* Lower bound: -195202.9596396856\n",
      "********\n",
      "********\n",
      "* Benders' step 11:\n",
      "* Upper bound: -194459.43108348924\n",
      "* Lower bound: -195111.2427179468\n",
      "********\n",
      "********\n",
      "* Benders' step 12:\n",
      "* Upper bound: -194405.62220426043\n",
      "* Lower bound: -195073.99413989688\n",
      "********\n",
      "********\n",
      "* Benders' step 13:\n",
      "* Upper bound: -194510.54007723092\n",
      "* Lower bound: -195072.45353457573\n",
      "********\n",
      "********\n",
      "* Benders' step 14:\n",
      "* Upper bound: -194758.666887083\n",
      "* Lower bound: -195065.588551258\n",
      "********\n",
      "********\n",
      "* Benders' step 15:\n",
      "* Upper bound: -194781.09309929312\n",
      "* Lower bound: -194987.81892669486\n",
      "********\n",
      "********\n",
      "* Benders' step 16:\n",
      "* Upper bound: -194817.49128958743\n",
      "* Lower bound: -194980.491941937\n",
      "********\n",
      "********\n",
      "* Benders' step 17:\n",
      "* Upper bound: -194853.54839749951\n",
      "* Lower bound: -194972.91244241988\n",
      "********\n",
      "********\n",
      "* Benders' step 18:\n",
      "* Upper bound: -194894.67175970715\n",
      "* Lower bound: -194915.2602827549\n",
      "********\n",
      "********\n",
      "* Benders' step 19:\n",
      "* Upper bound: -194901.65770319957\n",
      "* Lower bound: -194910.86229620536\n",
      "********\n",
      "********\n",
      "* Benders' step 20:\n",
      "* Upper bound: -194904.55696394757\n",
      "* Lower bound: -194905.12253416877\n",
      "********\n",
      "********\n",
      "* Benders' step 21:\n",
      "* Upper bound: -194905.00495542135\n",
      "* Lower bound: -194905.0276661433\n",
      "********\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Demand cleared in DA market [MW]')"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "\n",
    "# from benders_stochastic_master import Benders_Master\n",
    "\n",
    "sns.set_style('ticks')\n",
    "\n",
    "m = Benders_Master()\n",
    "m.model.Params.OutputFlag = False\n",
    "m.optimize()\n",
    "\n",
    "m.model.write(\"test.lp\")\n",
    "\n",
    "rtdf = pd.DataFrame({g: {m.data.demand_rt[s]: m.submodels[s].variables.gprod_rt[g].x for s in m.data.scenarios} for g in m.data.generators})\n",
    "updf = pd.DataFrame({g: {m.data.demand_rt[s]: m.submodels[s].variables.gprod_rt_up[g].x for s in m.data.scenarios} for g in m.data.generators})\n",
    "downdf = pd.DataFrame({g: {m.data.demand_rt[s]: m.submodels[s].variables.gprod_rt_down[g].x for s in m.data.scenarios} for g in m.data.generators})\n",
    "\n",
    "dacost = m.model.ObjVal - m.variables.alpha.x\n",
    "rscostseries = pd.Series({m.data.demand_rt[s]: sum(\n",
    "    m.data.geninfo.price[g]*m.submodels[s].variables.gprod_rt[g].x +\n",
    "    m.data.geninfo.uppremium[g]*m.submodels[s].variables.gprod_rt_up[g].x +\n",
    "    m.data.geninfo.downpremium[g]*m.submodels[s].variables.gprod_rt_down[g].x\n",
    "    for g in m.data.generators) for s in m.data.scenarios})\n",
    "\n",
    "\n",
    "plt.ion()\n",
    "\n",
    "plt.figure(figsize=(12, 8))\n",
    "ax = plt.subplot(221)\n",
    "rtdf.plot(ax=ax, marker='.')\n",
    "plt.xlabel('Realised real-time demand [MW]')\n",
    "plt.ylabel('Generator setting [MW]')\n",
    "\n",
    "ax = plt.subplot(222)\n",
    "rscostseries.plot(ax=ax, marker='.')\n",
    "plt.xlabel('Realised real-time demand [MW]')\n",
    "plt.ylabel('Final cost [$]')\n",
    "\n",
    "ax = plt.subplot(223)\n",
    "updf.plot(ax=ax, marker='.')\n",
    "plt.xlabel('Realised real-time demand [MW]')\n",
    "plt.ylabel('Generator upregulation [MW]')\n",
    "\n",
    "ax = plt.subplot(224)\n",
    "downdf.plot(ax=ax, marker='.')\n",
    "plt.xlabel('Realised real-time demand [MW]')\n",
    "plt.ylabel('Generator downregulation [MW]')\n",
    "plt.tight_layout()\n",
    "\n",
    "m.model.Params.OutputFlag = False\n",
    "m.params.verbose = False\n",
    "demands = np.linspace(160, 240, 81)\n",
    "costs = []\n",
    "for demand in demands:\n",
    "    m.variables.load_da.ub = demand\n",
    "    m.variables.load_da.lb = demand\n",
    "    m._clear_cuts()\n",
    "    m.optimize()\n",
    "    costs.append(-m.model.ObjVal)\n",
    "m.variables.load_da.ub = 200\n",
    "m.variables.load_da.lb = 0\n",
    "\n",
    "plt.figure()\n",
    "plt.plot(demands, costs)\n",
    "plt.ylabel('Social Welfare [$]')\n",
    "plt.xlabel('Demand cleared in DA market [MW]')"
   ]
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
